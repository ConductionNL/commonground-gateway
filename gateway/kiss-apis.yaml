## Collections
#App\Entity\CollectionEntity:
#    brcCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/gemma-zaken/master/api-specificatie/brc/1.1.x/openapi.yaml
#        name: brc collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/brc_publiccode/main/data/brc.json
#    brpCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/master/specificatie/genereervariant/openapi.yaml
#        name: brp collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/brp_publiccode/main/data/brp.yml
#    contactmomentenCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/ConductionNL/contactmomenten_publiccode/main/OAS.yaml
#        name: contactmomenten collection
#        sourceType: GitHub
#        testDataLocation: https://github.com/ConductionNL/contactmomenten_publiccode/raw/main/data/contactmomenten.json
#    drcCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/gemma-zaken/master/api-specificatie/drc/1.1.x/openapi.yaml
#        name: DRC collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/drc_publiccode/main/data/drc.json
#    klantenCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/klanten-api/master/src/openapi.yaml
#        name: Klanten collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/klanten_publiccode/main/data/klanten.json
#    loggingReadCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/gemma-verwerkingenlogging/master/docs/api-read/oas-specification/logging-verwerkingen-api/openapi.yaml
#        name: Logging read collection
#        sourceType: GitHub
#        testDataLocation: https://github.com/ConductionNL/logging-verwerking-read_publiccode/raw/main/data/logging-verwerking-read.yml
#    loggingWriteCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/gemma-verwerkingenlogging/master/docs/api-write/oas-specification/logging-verwerkingen-api/openapi.yaml
#        name: Logging write collection
#        sourceType: GitHub
#        testDataLocation: https://github.com/ConductionNL/logging-verwerking-write_publiccode/raw/main/data/logging-verwerking-write.yml
#    pdcCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/ConductionNL/PDC_publiccode/main/PDC_OAS.json
#        name: producten en diensten collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/PDC_publiccode/main/data/PDC.json
#    pubCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/ConductionNL/PUB_publiccode/main/PUB_OAS.json
#        name: Pub collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/PUB_publiccode/main/data/PUB.json
#    verzoekenCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/verzoeken-api/master/src/openapi.yaml
#        name: verzoeken collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/verzoeken_publiccode/main/data/verzoeken.json
#    zrcCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/gemma-zaken/master/api-specificatie/zrc/1.2.x/openapi.yaml
#        name: zrc collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/zrc_publiccode/main/data/zrc.json
#    ztcCollection:
#        autoLoad: true
#        loadTestData: true
#        locationOAS: https://raw.githubusercontent.com/VNG-Realisatie/gemma-zaken/master/api-specificatie/ztc/1.1.x/openapi.yaml
#        name: ZTC collection
#        sourceType: GitHub
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/ztc_publiccode/main/data/ztc.json
#    referentielijstenCollection:
#        name: Referentielijsten collection
#        sourceType: GitHub
#        locationOAS: https://raw.githubusercontent.com/ConductionNL/referentielijsten_publiccode/main/OAS.yaml
#        testDataLocation: https://raw.githubusercontent.com/ConductionNL/referentielijsten_publiccode/main/data/referentielijsten.json
#        loadTestData: true
#        autoLoad: true
#
## Entities
#App\Entity\Entity:
#    # Review Entity
#    review:
#        name: Review
#        description: Biedt de generieke mogelijkheid om gebruikers reviews te geven over objecten
#        route: "/api/reviews"
#        endpoint: "reviews"
#
#    # Note Entity
#    note:
#        name: Note
#        description: Biedt de generieke mogelijkheid om gebruikers notities te laten aanmaken of resources (bijvoorbeeld Common Ground resources). Deze functionaliteit is bewust abstract opgezet.
#        route: "/api/notes"
#        endpoint: "notes"
#        
#    # Search Entity
#    search:
#        name: Search
#        description: The search object is based on https://schema.org/SearchAction and is meant to hold search actions perfermoed by users, with other words it preserfec a search history.
#        route: "/api/searches"
#        endpoint: "searches"
#
## Attributes
#App\Entity\Attribute:
#    # Review Attributes
#    review_author:
#        name: author
#        description: The user that made this review.
#        type: string
#        format: uuid
#        required: true
#        entity: "@review"
#        searchable: true
#        
#    review_topic:
#        name: topic
#        description: The object that this review is about.
#        type: string
#        format: url
#        required: true
#        entity: "@review"
#        searchable: true
#        
#    review_name:
#        name: name
#        description: The name of this review.
#        type: string
#        required: true
#        entity: "@review"
#        searchable: true
#        
#    review_description:
#        name: description
#        description: The description of this review.
#        type: string
#        required: true
#        entity: "@review"
#        
#    review_rating:
#        name: rating
#        description: The rating of this review.
#        type: integer
#        entity: "@review"
#        
#    # Note Attributes
#    note_author:
#        name: author
#        description: The user that made this note.
#        type: string
#        format: uuid
#        required: true
#        entity: "@note"
#        searchable: true
#        
#    note_topic:
#        name: topic
#        description: The object that this note is about.
#        type: string
#        format: url
#        required: true
#        entity: "@note"
#        searchable: true
#        
#    note_name:
#        name: name
#        description: The name of this note.
#        type: string
#        required: true
#        entity: "@note"
#        searchable: true
#
#    note_description:
#        name: description
#        description: The description of this note.
#        type: string
#        required: true
#        entity: "@note"
#        
#    # Search Attributes
#    search_agent:
#        name: agent
#        description: The direct performer or driver of the action (animate or inanimate). e.g. John wrote a book.
#        type: string
#        format: url
#        required: true
#        entity: "@search"
#        searchable: true
#    
#    search_object:
#        name: object
#        description: The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read a book.
#        type: string
#        format: url
#        required: true
#        entity: "@search"
#        searchable: true
#        
#    search_actionStatus:
#        name: actionStatus
#        description: Indicates the current disposition of the Action. Based on ActionStatusType (https://schema.org/ActionStatusType)
#        type: string
#        enum: ["Active", "Completed", "Failed", "Potential"]
#        entity: "@search"
#        searchable: true
#        
#    search_instrument:
#        name: instrument
#        description: The object that helped the agent perform the action. e.g. John searched with the generic search feature.
#        type: string
#        entity: "@search"
#        
#    search_location:
#        name: location
#        description: The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
#        type: string
#        entity: "@search"
#    
#    search_participants:
#        name: participants
#        description: Other co-agents that participated in the action indirectly. e.g. John wrote a book with Steve.
#        type: string
#        multiple: true
#        entity: "@search"
#    
#    search_provider:
#        name: provider
#        description: The service provider, service operator, or service performer; e.g ElasticSearch
#        example: ElasticSearch
#        type: string
#        entity: "@search"
#        
#    search_result:
#        name: result
#        description: The result produced in the action. e.g. John wrote a book.
#        type: array
#        entity: "@search"
#        
#    search_error:
#        name: error
#        description: For failed actions, more information on the cause of the failure.
#        type: string
#        entity: "@search"
#        
#    search_endTime:
#        name: endTime
#        description: The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to December. For media, including audio and video, it's the time offset of the end of a clip within a larger file.
#        type: datetime
#        entity: "@search"
#        
#    search_startTime:
#        name: startTime
#        description: The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.
#        type: datetime
#        entity: "@search"
#        
#    search_target:
#        name: target
#        description: Indicates a target EntryPoint for an Action. Based on EntryPoint (https://schema.org/EntryPoint)
#        type: string
#        format: url
#        entity: "@search"
#
## Parameters for endpoint regex
#parameters:
#    reviewItemRegex: "^reviews/[a-z0-9-]{36}$"
#    noteItemRegex: "^notes/[a-z0-9-]{36}$"
#    searchItemRegex: "^searches/[a-z0-9-]{36}$"
#    
## Endpoints        
#App\Entity\Endpoint:
#    # Review Endpoints
#    reviewEndpointGet:
#        name: Review endpoint get collection
#        description: endpoint for reviews
#        path: [ 'reviews' ]
#        pathRegex: "^(reviews)$"
#        method: GET
#        operationType: collection
#
#    reviewEndpointPost:
#        name: Review endpoint post
#        description: endpoint for reviews
#        path: [ 'reviews' ]
#        pathRegex: "^(reviews)$"
#        method: POST
#        operationType: collection
#
#    reviewEndpointGetItem:
#        name: Review endpoint get item
#        description: endpoint for reviews
#        path: [ 'reviews', '{id}' ]
#        pathRegex: <{reviewItemRegex}>
#        method: GET
#        operationType: item
#
#    reviewEndpointPut:
#        name: Review endpoint put
#        description: endpoint for reviews
#        path: [ 'reviews', '{id}' ]
#        pathRegex: <{reviewItemRegex}>
#        method: PUT
#        operationType: item
#
#    reviewEndpointDelete:
#        name: Review endpoint delete
#        description: endpoint for reviews
#        path: [ 'reviews', '{id}' ]
#        pathRegex: <{reviewItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # Note Endpoints
#    noteEndpointGet:
#        name: Note endpoint get collection
#        description: endpoint for notes
#        path: [ 'notes' ]
#        pathRegex: "^(notes)$"
#        method: GET
#        operationType: collection
#
#    noteEndpointPost:
#        name: Note endpoint post
#        description: endpoint for notes
#        path: [ 'notes' ]
#        pathRegex: "^(notes)$"
#        method: POST
#        operationType: collection
#
#    noteEndpointGetItem:
#        name: Note endpoint get item
#        description: endpoint for notes
#        path: [ 'notes', '{id}' ]
#        pathRegex: <{noteItemRegex}>
#        method: GET
#        operationType: item
#
#    noteEndpointPut:
#        name: Note endpoint put
#        description: endpoint for notes
#        path: [ 'notes', '{id}' ]
#        pathRegex: <{noteItemRegex}>
#        method: PUT
#        operationType: item
#
#    noteEndpointDelete:
#        name: Note endpoint delete
#        description: endpoint for notes
#        path: [ 'notes', '{id}' ]
#        pathRegex: <{noteItemRegex}>
#        method: DELETE
#        operationType: item
#        
#    # Search Endpoints
#    searchEndpointGet:
#        name: Search endpoint get collection
#        description: endpoint for searches
#        path: [ 'searches' ]
#        pathRegex: "^(searches)$"
#        method: GET
#        operationType: collection
#
#    searchEndpointPost:
#        name: Search endpoint post
#        description: endpoint for searches
#        path: [ 'searches' ]
#        pathRegex: "^(searches)$"
#        method: POST
#        operationType: collection
#
#    searchEndpointGetItem:
#        name: Search endpoint get item
#        description: endpoint for searches
#        path: [ 'searches', '{id}' ]
#        pathRegex: <{searchItemRegex}>
#        method: GET
#        operationType: item
#
#    searchEndpointPut:
#        name: Search endpoint put
#        description: endpoint for searches
#        path: [ 'searches', '{id}' ]
#        pathRegex: <{searchItemRegex}>
#        method: PUT
#        operationType: item
#
#    searchEndpointDelete:
#        name: Search endpoint delete
#        description: endpoint for searches
#        path: [ 'searches', '{id}' ]
#        pathRegex: <{searchItemRegex}>
#        method: DELETE
#        operationType: item
#
## Handlers
#App\Entity\Handler:
#    # Review Handler
#    reviewHandler:
#        name: Review handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@reviewEndpointGet", "@reviewEndpointPost", "@reviewEndpointGetItem", "@reviewEndpointPut", "@reviewEndpointDelete"]
#        entity: "@review"
#        
#    # Note Handler
#    noteHandler:
#        name: Note handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@noteEndpointGet", "@noteEndpointPost", "@noteEndpointGetItem", "@noteEndpointPut", "@noteEndpointDelete" ]
#        entity: "@note"
#        
#    # Search Handler
#    searchHandler:
#        name: Search handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@searchEndpointGet", "@searchEndpointPost", "@searchEndpointGetItem", "@searchEndpointPut", "@searchEndpointDelete" ]
#        entity: "@search"
