## todo: NOTE: WARNING!!! Read before deploying: When copy pasting this for a deploy and changing this .yaml from dev to stag or acc. Don't forget to change the organization_parentOrganization defaultValue!!!
## todo: 2nd WARNING!!! when UC fixtures are reloaded the test+biscadmin+scenario@conduction.nl user uuid will change, in the application below the resource is a reference to this user object, so when the uuid is changed this resource uri needs to be updated as well!!! otherwise the taalhuizen-logic service wont be able to communicate with the gateway!
#App\Entity\Application:
#    application:
#        name: main application
#        secret: 5fbffbf5-412a-41bc-82bf-3b41d71246ea
#        resource: https://taalhuizen-bisc.commonground.nu/api/v2/uc/users/69121821-a11e-45f4-a7df-3bdaee66d604
#        domains:
#            - backend-bisc-dev.commonground.nu
#        organization: https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951
#    smpApplication:
#        name: SMP application
#        secret: 3c2ca9b2-9886-48bc-8ff9-98fd2cfa6774
#        resource: https://taalhuizen-bisc.commonground.nu/api/v2/uc/users/460c8659-ad73-4e00-9cf5-3970fe356fc4
#App\Entity\Gateway:
#    edu_api:
#        name: educatie component
#        auth: apikey
#        apikey: 8b55691f-346d-423c-bdcf-3f5365806d39
#        location: https://taalhuizen-bisc.commonground.nu/api/v1/edu
#        documentation: https://raw.githubusercontent.com/ConductionNL/education-component/master/api/public/schema/openapi.yaml
#    # todo: remove cc dependency:
#    contacten_api:
#        name: contacten component
#        auth: apikey
#        apikey: 8b55691f-346d-423c-bdcf-3f5365806d39
#        location: https://taalhuizen-bisc.commonground.nu/api/v1/cc
#        documentation: https://raw.githubusercontent.com/ConductionNL/contactcatalogus/master/api/public/schema/openapi.yaml
#    mrc_api:
#        name: medewerker catalogus
#        auth: apikey
#        apikey: 8b55691f-346d-423c-bdcf-3f5365806d39
#        location: https://taalhuizen-bisc.commonground.nu/api/v1/mrc
#        documentation: https://raw.githubusercontent.com/ConductionNL/medewerkercatalogus/master/api/public/schema/openapi.yaml
#    uc_api:
#        name: user component
#        auth: apikey
#        apikey: 8b55691f-346d-423c-bdcf-3f5365806d39
#        location: https://taalhuizen-bisc.commonground.nu/api/v2/uc
#        documentation: https://raw.githubusercontent.com/ConductionNL/user-component/master/api/public/schema/openapi.yaml
#
#App\Entity\Entity:
#    # User object
#    user:
#        route: "/users"
#        name: users
#        description: Dit endpoint behandeld alle functionaliteit rondom users of gebruikers.
#        gateway: "@uc_api"
#        endpoint: "users"
#        availableProperties:
#            - username
#            - roles
#            - userGroups
#            - locale
#            - person
#        usedProperties:
#            - username
#            - password
#            - organization
#            - roles
#            - userGroups
#            - emailValidated
#            - locale
#            - person
#            - currentPassword
#        
#
#    # UserGroup (security) object
#    usergroup:
#        function: "userGroup"
#        route: "/user_groups"
#        name: user_groups
#        description: Dit endpoint behandeld alle functionaliteit rondom groepen van gebruikers. Zo kan je met deze groepen onderscheid wat een gebruiker wel mag en de andere niet.
#        gateway: "@uc_api"
#        endpoint: "groups"
#        availableProperties:
#            - organization
#            - name
#            - description
#            - code
#            - scopes
#    #            - users
#
#    # Organization Object
#    organization:
#        function: "organization"
#        route: "/organizations"
#        name: organizations
#        description: Dit endpoint behandeld alle functionaliteit rondom organisaties. Binnen TOP hebben organisaties een belangrijke rol, taalhuizen en aanbieders zijn bijvoorbeeld organisaties.
#        gateway: "@contacten_api" # todo: remove:
#        endpoint: "organizations"
#        inherited: true
#        # todo: remove availableProperties & usedProperties if we remove cc dependency
#        # (if usedProperties is set) availableProperties could just be : [], would do the same as current list, because all of these attributes are persistToGateway = true
#        # availableProperties = properties we want to get from external object (what we want to show in post/put responses)
#        availableProperties:
#            - name
#            - type
#            - telephones
#            - addresses
#            - emails
#            - parentOrganization
##            - subOrganizations
#        # usedProperties could be totally removed here, this would allow all properties to be used, and that equals this list below.
#        # usedProperties = properties we want to be able to post, put and get (what we allow to be post/put and what we want to show in get responses)
#        usedProperties:
#            - name
#            - type
#            - telephones
#            - addresses
#            - emails
#            - parentOrganization
##            - subOrganizations
#            - members
#            - languageHouse_postalCodes
#            - team_postalCodes
#
#    #Email Object
#    email:
#        name: email
#        description: Dit object beschrijft een email-adres welke gekoppeld kan worden aan een persoon of organisatie. Dit email-adres moet uniek zijn.
#        gateway: "@contacten_api" # todo: remove:
#        endpoint: "emails"
#        # todo: remove availableProperties if we remove cc dependency
#        availableProperties:
#            - name
#            - email
#    
#    #notUniqueEmail Object
#    notUniqueEmail:
#        name: email
#        description: Dit object beschrijft een email-adres welke gekoppeld kan worden aan een persoon of organisatie. Dit email-adres hoeft niet uniek te zijn.
#        gateway: "@contacten_api" # todo: remove:
#        endpoint: "emails"
#        # todo: remove availableProperties if we remove cc dependency
#        availableProperties:
#            - name
#            - email
#
#    #Telefoon Object
#    telephone:
#        name: telephone
#        description: Dit object beschrijft een telefoonnummer welke gekoppeld kan worden aan een persoon of organisatie.
#        gateway: "@contacten_api" # todo: remove:
#        endpoint: "telephones"
#        # todo: remove availableProperties if we remove cc dependency
#        availableProperties:
#            - name
#            - telephone
#
#    #Address Object
#    address:
#        name: address
#        description: Dit object beschrijft een adres welke gekoppeld kan worden aan een persoon of organisatie.
#        gateway: "@contacten_api" # todo: remove:
#        endpoint: "addresses"
#        # todo: remove availableProperties if we remove cc dependency
#        availableProperties:
#            - name
#            - street
#            - houseNumber
#            - houseNumberSuffix
#            - postalCode
#            - locality
#            - country
#
#    # Person Object
#    person:
##        function: "person" # todo
#        name: persons
#        description: Dit object beschrijft een persoon en alleen eigenschappen die specifiek bij een persoon horen.
#        gateway: "@contacten_api" # todo: remove:
#        endpoint: "people"
#        # todo: remove availableProperties & usedProperties if we remove cc dependency
#        availableProperties:
#            - givenName
#            - additionalName
#            - familyName
#            - birthday
#            - primaryLanguage
#            - birthplace
#            - gender
#            - speakingLanguages
#            - maritalStatus
#            - addresses
#            - telephones
#            - emails
#            - contactPreference
#        usedProperties:
#            - givenName
#            - additionalName
#            - familyName
#            - birthday
#            - primaryLanguage
#            - birthplace
#            - gender
#            - speakingLanguages
#            - maritalStatus
#            - addresses
#            - telephones
#            - emails
#            - contactPreference
#            # These: are only stored in the gateway, not external. UsedProperties is used to hide user of a person
#            - contactPreferenceOther
#            - availability
#            - availabilityNotes
#            - children
#            - country
#
#    # Employee Object
#    employee:
#        route: "/employees"
#        name: employees
#        description: Dit object beschrijft een medewerker en alleen eigenschappen die specifiek bij een medewerker horen.
#        gateway: "@mrc_api"
#        endpoint: "employees"
#        availableProperties: []
#
#    #Student Object
#    student:
#        route: "/students"
#        name: students
#        description: Dit object beschrijft een student en alleen eigenschappen die specifiek bij een student horen. Binnen taalhuizen wordt student ook wel deelnemer genoemd.
#        gateway: "@edu_api"
#        endpoint: "participants"
#        availableProperties: []
#
#    # Medewerker Intake object
#    employeeIntake:
#        name: employee_intake
#        description: Bij een nieuwe medewerker wordt een intake gedaan om te kijken waar de medewerker best beste ingezet kan worden
#
#    # Student Intake object
#    studentIntake:
#        name: student_intake
#        description: Bij een nieuwe student of deelnemer wordt een intake gedaan om te kijken wat zijn taalniveau is en wat hij of zij wil leren
#
#    # Civic Integration  object
#    civicIntegration:
#        name: civicIntegration
#        description: In dit object slaan we informatie op ten opzichten van de inburgering
#
#    # Education object
#    education:
#        name: education
#        description: Het educatie object maakt het mogelijk alle vormen van leertrajecten die een persoon zou kunnen volgen te beschrijven en behandelen. Een leertraject zou een volledige MBO studie kunnen zijn maar ook een cursus.
#
#    # LearningNeed object
#    learningNeed:
#        route: "/learning_needs"
#        name: LearningNeed
#        description: Het learningNeed object beschrijft de leerbehoefte van de student.
#
#    # LearningResult object
#    learningResult:
#        route: "/learning_results"
#        name: LearningResult
#        description: Het learningResult object beschrijft de leerresultaten van de student.
#
#    # participation object
#    participation:
#        route: "/participations"
#        name: participation
#        description: Een deelname...
#
#    # TestResult object
#    testResult:
#        route: "/test_results"
#        name: testResult
#        description: Een toetsresultaat...
#
#    # Document object
#    document:
#        route: "/documents"
#        name: document
#        description: Een document...
#
#    # ContactMoment object
#    contactMoment:
#        route: "/contact_moments"
#        name: contactMoment
#        description: Een dossier (gebeurtenis)...
#
#    # PostalCode object
#    postalCode:
#        route: "/postal_codes"
#        name: postalCode
#        description: Een combinatie van een 1000 code van een postcode, en een taalhuis
#    
#    # shareStudent object
#    shareStudent:
#        route: "/share_students"
#        name: shareStudent
#        description: Het delen van een student met een specifiek email adres
#    
#    # ReferringPerson object
#    referringPerson:
#        name: referringPerson
#        description: Een persoon object voor de persoon die een publieke student intake aanmaakt.
#
#App\Entity\Attribute:
#    # User attributes
#    user_username:
#        name: username
#        description: Usually an email address.
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@user"
#        mustBeUnique: true
#        persistToGateway: true
#    user_password: #temporary this should be send by mail
#        name: password
#        description: Keep this peronal
#        type: string
#        maxLength: 255
#        entity: "@user"
#        persistToGateway: true
#        writeOnly: true
#    user_locale:
#        name: locale
#        description: Location setting for the user.
#        type: string
#        maxLength: 255
#        required: true
#        defaultValue: nl-NL
#        entity: "@user"
#        persistToGateway: true
#    user_organization:
#        name: organization
#        description: To which organization does the user belong?
#        type: object
#        required: true
#        persistToGateway: true
#        entity: "@user"
#        object: "@organization"
#    user_usergroups:
#        name: userGroups
#        description: In what usergroups does the user resides.
#        type: object
#        multiple: true
#        required: true
#        entity: "@user"
#        object: "@usergroup"
#        persistToGateway: true
#    user_person:
#        name: person
#        description: The person of this user.
#        type: object
#        entity: "@user"
#        object: "@person"
#        cascade: true
#        cascadeDelete: true
#        persistToGateway: true
#        inversedBy: "@person_user"
#    user_currentPassword:
#        name: currentPassword
#        description: The current password when changing the password on a PUT
#        type: string
#        maxLength: 255
#        entity: "@user"
#        persistToGateway: true
#        writeOnly: true
#
#    #     UserGroup (security) properties
#    userGroup_organization:
#        name: organization
#        description: To which organization does this usergroup belong?
#        type: object
#        required: true
#        entity: "@usergroup"
#        object: "@organization"
#        persistToGateway: true
#    userGroup_name:
#        name: name
#        description: What is the name of this usergroup?
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@usergroup"
#        persistToGateway: true
#    userGroup_description:
#        name: description
#        description: What is the function of this usergroup? To which parts of the application does it give access?
#        type: string
#        maxLength: 2550
#        required: true
#        entity: "@usergroup"
#        persistToGateway: true
#    userGroup_code:
#        name: code
#        description: What is the code of this usergroup?
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@usergroup"
#        persistToGateway: true
#
#    # Organization properties
#    organization_name:
#        name: name
#        description: What is the name of the organization.
#        type: string
#        required: true
#        maxLength: 255
#        mustBeUnique: true
#        entity: "@organization"
#        persistToGateway: true # todo: remove after removing cc dependency:
#        searchable: true
#    # todo: put back after removing cc dependency:
##    organization_description:
##        name: description
##        description: The description of this organization.
##        type: string
##        maxLength: 255
##        entity: "@organization"
#    organization_type:
#        name: type
#        description: To be able to differentiat between organizations we need to know what kind of organization they are. The type attribute descirbes what kind of organization this is.
#        type: string
#        required: true
#        enum: ["taalhuis", "bisc", "verwijzer", "aanbieder", "team"]
#        entity: "@organization"
#        persistToGateway: true # todo: remove after removing cc dependency:
#        searchable: true
#        immutable: true
#    organization_parentOrganization:
#        name: parentOrganization
#        description: The larger organization that this organization is a subOrganization of.
#        type: object
#        entity: "@organization"
#        object: "@organization"
#        persistToGateway: true # todo: remove after removing cc dependency:
#        searchable: true
#        immutable: true
##        requiredIf:
##            type: team.noDefaultValue #TODO!
##        inversedBy: "@organization_subOrganizations"
#        defaultValue: "a0dc8cdc-c637-46b9-be8d-9103edc1e951" # TODO: BISC cc/organization uuid, change this when switching dev, stag or acc.
##    organization_subOrganizations:
##        name: subOrganizations
##        description: The sub-organizations of which this organization is the parent organization.
##        type: object
##        multiple: true
##        entity: "@organization"
##        object: "@organization"
##        persistToGateway: true # todo: remove after removing cc dependency:
##        cascade: true
##        inversedBy: "@organization_parentOrganization"
#    organization_addresses:
#        name: addresses
#        description: Where is the organization located?
#        type: object
#        multiple: true
#        entity: "@organization"
#        object: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#        cascade: true
#        cascadeDelete: true
#    organization_telephones:
#        name: telephones
#        description: The telephone number of the organization.
#        type: object
#        multiple: true
#        entity: "@organization"
#        object: "@telephone"
#        persistToGateway: true # todo: remove after removing cc dependency:
#        cascade: true
#        cascadeDelete: true
#    organization_emails:
#        name: emails
#        description: The email address of the organization.
#        type: object
#        multiple: true
#        mustBeUnique: true
#        entity: "@organization"
#        object: "@email"
#        persistToGateway: true # todo: remove after removing cc dependency:
#        cascade: true
#        cascadeDelete: true
##        include: true
##        extend: true
#    organization_members:
#        name: members
#        description: The members of this organization (if it is a team).
#        type: object
#        multiple: true
#        entity: "@organization"
#        object: "@employee"
#        inversedBy: "@employee_teams"
#        mayBeOrphaned: false
#    organization_languageHouse_postalCodes:
#        name: languageHouse_postalCodes
#        description: The postalcodes that are asigned to this languagehouse.
#        type: object
#        multiple: true
#        mustBeUnique: true
#        entity: "@organization"
#        object: "@postalCode"
#        cascade: true
#        cascadeDelete: true
#        inversedBy: "@postalCode_languageHouse"
#    organization_team_postalCodes:
#        name: team_postalCodes
#        description: The postalcodes that are asigned to this team.
#        type: object
#        multiple: true
#        mustBeUnique: true
#        entity: "@organization"
#        object: "@postalCode"
#        cascade: true
#        inversedBy: "@postalCode_team"
#
#    # Email
#    email_name:
#        name: name
#        type: string
#        maxLength: 255
#        entity: "@email"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    email_email:
#        name: email
#        type: string
#        maxLength: 255
#        required: true
#        format: email
#        mustBeUnique: true
#        caseSensitive: false
#        entity: "@email"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    
#    # Not unique Email
#    notUniqueEmail_name:
#        name: name
#        type: string
#        maxLength: 255
#        entity: "@notUniqueEmail"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    notUniqueEmail_email:
#        name: email
#        type: string
#        maxLength: 255
#        required: true
#        format: email
#        entity: "@notUniqueEmail"
#        persistToGateway: true # todo: remove after removing cc dependency:
#
#    #Telephone
#    telephone_name:
#        name: name
#        type: string
#        maxLength: 255
#        entity: "@telephone"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    telephone_telephone:
#        name: telephone
#        type: string
#        maxLength: 255
#        required: true
#        format: phone
#        entity: "@telephone"
#        persistToGateway: true # todo: remove after removing cc dependency:
#
#    # Address
#    address_name:
#        name: name
#        type: string
#        maxLength: 255
#        entity: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    address_street:
#        name: street
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    address_houseNumber:
#        name: houseNumber
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    address_houseNumberSuffix:
#        name: houseNumberSuffix
#        type: string
#        maxLength: 255
#        entity: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    address_postalCode:
#        name: postalCode
#        type: string
#        maxLength: 255
#        required: true
#        persistToGateway: true # todo: remove after removing cc dependency:
#        entity: "@address"
#    address_locality:
#        name: locality
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    address_country:
#        name: country
#        type: string
#        format: countryCode
#        maxLength: 255
#        entity: "@address"
#        persistToGateway: true # todo: remove after removing cc dependency:
#
#    # Person Properties
#    person_givenName:
#        name: givenName
#        type: string
#        maxLength: 255
#        required: true;
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_additionalName:
#        name: additionalName
#        type: string
#        maxLength: 255
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_familyName:
#        name: familyName
#        type: string
#        maxLength: 255
#        entity: "@person"
#        required: true
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_birthday:
#        name: birthday
#        type: date
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_birthplace:
#        name: birthplace
#        type: string
#        format: countryCode
#        entity: "@person"
#        maxLength: 255
#    person_country:
#        name: country
#        type: string
#        format: countryCode
#        maxLength: 255
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_gender:
#        name: gender
#        type: string
#        enum: ["Male", "Female", "X"]
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_maritalStatus:
#        name: maritalStatus
#        type: string
#        enum: ["MARRIED_PARTNER", "SINGLE", "DIVORCED", "WIDOW"]
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_primaryLanguage:
#        name: primaryLanguage
#        type: string
#        #        format: countryCode #TODO: do we want this here? (Lifely just wants a string¿)
#        maxLength: 255
#        entity: "@person"
#        persistToGateway: true # todo: remove after removing cc dependency:
#    person_speakingLanguages:
#        name: speakingLanguages
#        type: string
#        maxLength: 255
#        entity: "@person"
#    person_contactPreference:
#        name: contactPreference
#        type: string
#        enum: ["PHONECALL", "WHATSAPP", "EMAIL", "OTHER"]
#        entity: "@person"
#    person_contactPreferenceOther:
#        name: contactPreferenceOther
#        type: string
#        maxLength: 255
#        entity: "@person"
##        requiredIf:
##            contactPreference: OTHER #TODO!
#    person_availability:
#        name: availability
#        type: string
#        multiple: true
#        enum:
#          [
#                  "MONDAY_MORNING",
#                  "MONDAY_AFTERNOON",
#                  "MONDAY_EVENING",
#                  "TUESDAY_MORNING",
#                  "TUESDAY_AFTERNOON",
#                  "TUESDAY_EVENING",
#                  "WEDNESDAY_MORNING",
#                  "WEDNESDAY_AFTERNOON",
#                  "WEDNESDAY_EVENING",
#                  "THURSDAY_MORNING",
#                  "THURSDAY_AFTERNOON",
#                  "THURSDAY_EVENING",
#                  "FRIDAY_MORNING",
#                  "FRIDAY_AFTERNOON",
#                  "FRIDAY_EVENING",
#                  "SATURDAY_MORNING",
#                  "SATURDAY_AFTERNOON",
#                  "SATURDAY_EVENING",
#                  "SUNDAY_MORNING",
#                  "SUNDAY_AFTERNOON",
#                  "SUNDAY_EVENING",
#          ]
#        entity: "@person"
#    person_availabilityNotes:
#        name: availabilityNotes
#        type: string
#        maxLength: 255
#        entity: "@person"
#    person_children:
#        name: children
#        type: integer
#        entity: "@person"
#    person_addresses:
#        name: addresses
#        type: object
#        multiple: true
#        entity: "@person"
#        object: "@address"
#        cascade: true
#        cascadeDelete: true
#    person_telephones:
#        name: telephones
#        type: object
#        multiple: true
#        entity: "@person"
#        object: "@telephone"
#        cascade: true
#        cascadeDelete: true
#    person_emails:
#        name: emails
#        type: object
#        mustBeUnique: true
#        multiple: true
#        entity: "@person"
#        object: "@email"
#        cascade: true
#        cascadeDelete: true
#    person_user: # Only here so we delete the user of an employee, created with taalhuizen-logic repo
#        name: user
#        type: object
#        entity: "@person"
#        object: "@user"
#        cascadeDelete: true
#        inversedBy: "@user_person" # TODO: maybe can be removed
#
#    # Employee  Properties
#    employee_role:
#        name: role
#        type: string
#        entity: "@employee"
#        enum:
#          [
#                  "EMPLOYEE",
#                  "COORDINATOR",
#                  "MENTOR",
#                  "COORDINATOR_MENTOR",
#                  "VOLUNTEER",
#          ]
#        #        required: true # TODO: maybe use this instead of defaultValue?
#        defaultValue: "EMPLOYEE"
#        searchable: true
#    employee_person:
#        name: person
#        type: object
#        entity: "@employee"
#        object: "@person"
#        required: true
#        cascade: true
#        cascadeDelete: true
#        persistToGateway: true
#    employee_organization:
#        name: organization
#        type: object
#        entity: "@employee"
#        object: "@organization"
#        persistToGateway: true
#    employee_mentees:
#        name: mentees
#        type: object
#        multiple: true
#        entity: "@employee"
#        object: "@student"
#        inversedBy: "@student_mentor"
#        mayBeOrphaned: false
#    employee_teams:
#        name: teams
#        type: object
#        multiple: true
#        entity: "@employee"
#        object: "@organization"
#        inversedBy: "@organization_members"
#    employee_intake:
#        name: intake
#        type: object
#        entity: "@employee"
#        object: "@employeeIntake"
#        cascade: true
#        cascadeDelete: true
#    employee_education:
#        name: educations
#        type: object
#        multiple: true
#        entity: "@employee"
#        object: "@education"
#        cascade: true
#        cascadeDelete: true
#
#    # student properties
#    student_person:
#        name: person
#        type: object
#        entity: "@student"
#        object: "@person"
#        required: true
#        cascade: true
#        cascadeDelete: true
#        persistToGateway: true
#    student_civicIntegration:
#        name: civicIntegration
#        type: object
#        entity: "@student"
#        object: "@civicIntegration"
#        cascade: true
#        cascadeDelete: true
#    student_languageHouse:
#        name: languageHouse
#        type: object
#        entity: "@student"
#        object: "@organization"
#        required: true
#        immutable: true
#    student_team:
#        name: team
#        type: object
#        entity: "@student"
#        object: "@organization"
#    student_mentor:
#        name: mentor
#        type: object
#        entity: "@student"
#        object: "@employee"
#        inversedBy: "@employee_mentees"
#        unsetable: true
#    student_intake:
#        name: intake
#        type: object
#        entity: "@student"
#        object: "@studentIntake"
#        cascade: true
#        cascadeDelete: true
#    student_education:
#        name: educations
#        type: object
#        multiple: true
#        entity: "@student"
#        object: "@education"
#        cascade: true
#        cascadeDelete: true
#    student_participations:
#        name: participations
#        type: object
#        multiple: true
#        entity: "@student"
#        object: "@participation"
#        cascade: true
#        cascadeDelete: true
#    student_learningNeeds:
#        name: learningNeeds
#        type: object
#        multiple: true
#        entity: "@student"
#        object: "@learningNeed"
#        cascade: true
#        cascadeDelete: true
#        inversedBy: "@learningNeed_student"
#    student_referred:
#        name: referred
#        type: datetime
#        entity: "@student"
#
#        # Employee Intake properties
#    employeeIntake_targetGroupPreferences:
#        name: targetGroupPreferences
#        type: string
#        multiple: true
#        enum: ["NT1", "NT2"]
#        entity: "@employeeIntake"
#    employeeIntake_volunteeringPreference:
#        name: volunteeringPreference
#        type: string
#        maxLength: 255
#        entity: "@employeeIntake"
#    employeeIntake_gotHereVia:
#        name: gotHereVia
#        type: string
#        maxLength: 255
#        entity: "@employeeIntake"
#    employeeIntake_hasExperienceWithTargetGroup:
#        name: hasExperienceWithTargetGroup
#        type: boolean
#        entity: "@employeeIntake"
#    employeeIntake_experienceWithTargetGroupYesReason:
#        name: experienceWithTargetGroupYesReason
#        type: string
#        entity: "@employeeIntake"
##        requiredIf:
##            hasExperienceWithTargetGroup: true #TODO!
#    employeeIntake_currentEducation:
#        name: currentEducation
#        type: string
#        enum: ["YES", "NO", "NO_BUT_DID_EARLIER"]
#        entity: "@employeeIntake"
#    employeeIntake_otherRelevantCertificates:
#        name: otherRelevantCertificates
#        type: string
#        maxLength: 255
#        entity: "@employeeIntake"
#    employeeIntake_isVOGChecked:
#        name: isVOGChecked
#        type: boolean
#        entity: "@employeeIntake"
#
#    # Student Intake properties
#    studentIntake_date:
#        name: date
#        type: datetime
#        entity: "@studentIntake"
#    studentIntake_status:
#        name: status
#        type: string
#        enum: ["PENDING", "ACCEPTED", "REJECTED"]
#        defaultValue: "PENDING"
#        entity: "@studentIntake"
#        searchable: true
#    studentIntake_referringOrganization:
#        name: referringOrganization
#        type: string
#        enum:
#          [
#                  "UWV",
#                  "SOCIAL_SERVICE",
#                  "LIBRARY",
#                  "WELFARE_WORK",
#                  "NEIGHBORHOOD_TEAM",
#                  "VOLUNTEER_ORGANIZATION",
#                  "LANGUAGE_PROVIDER",
#                  "OTHER",
#          ]
#        entity: "@studentIntake"
#    studentIntake_referringOrganizationOther:
#        name: referringOrganizationOther
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
##        requiredIf:
##            referringOrganization: OTHER #TODO!
#    studentIntake_referringOrganizationEmail:
#        name: referringOrganizationEmail
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_referringPerson:
#        name: referringPerson
#        type: object
#        entity: "@studentIntake"
#        object: "@referringPerson"
#        cascade: true
#        cascadeDelete: true
#    studentIntake_foundVia:
#        name: foundVia
#        type: string
#        enum:
#          [
#                  "VOLUNTEER_CENTER",
#                  "LIBRARY_WEBSITE",
#                  "SOCIAL_MEDIA",
#                  "NEWSPAPER",
#                  "VIA_VIA",
#                  "OTHER",
#          ]
#        entity: "@studentIntake"
#    studentIntake_foundViaOther:
#        name: foundViaOther
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
##        requiredIf:
##            foundVia: OTHER #TODO!
#    studentIntake_wentToLanguageHouseBefore:
#        name: wentToLanguageHouseBefore
#        type: boolean
#        entity: "@studentIntake"
#    studentIntake_wentToLanguageHouseBeforeReason:
#        name: wentToLanguageHouseBeforeReason
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
##        requiredIf:
##            wentToLanguageHouseBefore: true #TODO!
#    studentIntake_wentToLanguageHouseBeforeYear:
#        name: wentToLanguageHouseBeforeYear
#        type: integer # taalhuizen-service is the type float
#        maxLength: 255
#        entity: "@studentIntake"
##        requiredIf:
##            wentToLanguageHouseBefore: true #TODO!
#    studentIntake_network:
#        name: network
#        type: string
#        # select multiple
#        enum:
#          [
#                  "HOUSEHOLD_MEMBERS",
#                  "NEIGHBORS",
#                  "FAMILY_MEMBERS",
#                  "AID_WORKERS",
#                  "FRIENDS_ACQUAINTANCES",
#                  "PEOPLE_AT_MOSQUE_CHURCH",
#                  "ACQUAINTANCES_SPEAKING_OWN_LANGUAGE",
#                  "ACQUAINTANCES_SPEAKING_DUTCH",
#          ]
#        multiple: true
#        entity: "@studentIntake"
#    studentIntake_participationLadder:
#        name: participationLadder
#        type: string
#        # type in taalhuis service is integer
#        # select single
#        enum:
#          [
#                  "1 geïsoleerd",
#                  "2 sociale contacten buiten huis",
#                  "3 deelname georganiseerde activiteiten",
#                  "4 vrijwilligers werk/maatschappelijke activering",
#                  "5 betaald werk met ondersteuning",
#                  "6 betaald werk",
#          ]
#        entity: "@studentIntake"
#    # dutchNTDetails
#    studentIntake_dutchNTLevel:
#        name: dutchNTLevel
#        type: string
#        enum: ["NT1", "NT2"]
#        entity: "@studentIntake"
#    studentIntake_inNetherlandsSinceYear:
#        name: inNetherlandsSinceYear
#        type: integer #DateTime?
#        entity: "@studentIntake"
#    studentIntake_languageInDailyLife:
#        name: languageInDailyLife
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_knowsLatinAlphabet:
#        name: knowsLatinAlphabet
#        type: boolean
#        entity: "@studentIntake"
#    studentIntake_lastKnownLevel:
#        name: lastKnownLevel
#        type: string
#        enum: ["A0", "A1", "A2", "B1", "B2", "C1", "C2", "UNKNOWN"]
#        entity: "@studentIntake"
#    studentIntake_trainedForJob:
#        name: trainedForJob
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_lastJob:
#        name: lastJob
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_dayTimeActivities:
#        name: dayTimeActivities
#        type: string
#        enum:
#          [
#                  "SEARCHING_FOR_JOB",
#                  "RE_INTEGRATION",
#                  "SCHOOL",
#                  "VOLUNTEER_JOB",
#                  "JOB",
#                  "OTHER",
#          ]
#        multiple: true #select multiple
#        entity: "@studentIntake"
#    studentIntake_dayTimeActivitiesOther:
#        name: dayTimeActivitiesOther
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
##        requiredIf:
##            dayTimeActivities: OTHER #TODO!
#    # motivationDetails
#    studentIntake_desiredSkills:
#        name: desiredSkills
#        type: string
#        #select multiple
#        enum:
#          [
#                  "DIGITAL_SKILLS_USING_ICT_SYSTEMS",
#                  "DIGITAL_SKILLS_SECURE_USAGE",
#                  "DIGITAL_SKILLS_SEARCHING",
#                  "DIGITAL_SKILLS_PROCESSING_INFORMATION",
#                  "DIGITAL_SKILLS_COMMUNICATION",
#                  "READING_INFORMATIVE_TEXTS",
#                  "READING_INSTRUCTIVE_TEXTS",
#                  "READING_ARGUMENTATIVE_TEXTS",
#                  "READING_TELLING_STORIES",
#                  "WRITING_CORRESPONDENCE",
#                  "WRITING_FORMS_AND_NOTES",
#                  "WRITING_REPORTS_AND_SUMMARIES",
#                  "WRITING_FREE_WRITING",
#                  "ORAL_SKILLS_CONVERSATIONS",
#                  "ORAL_SKILLS_PARTICIPATE_IN_DISCUSSION",
#                  "ORAL_SKILLS_MONOLOGUE",
#                  "ORAL_SKILLS_UNDERSTAND_INSTRUCTIONS",
#                  "ORAL_SKILLS_UNDERSTAND_MESSAGES",
#                  "ORAL_SKILLS_UNDERSTAND_SPEECH",
#                  "ORAL_SKILLS_UNDERSTAND_TV_PROGRAMS",
#                  "MATHEMATICS_NUMBERS",
#                  "MATHEMATICS_RELATIONS",
#                  "MATHEMATICS_GEOMETRY",
#                  "MATHEMATICS_CONNECTIONS",
#                  "OTHER",
#          ]
#        multiple: true
#        entity: "@studentIntake"
#    studentIntake_desiredSkillsOther:
#        name: desiredSkillsOther
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
##        requiredIf:
##            desiredSkills: OTHER #TODO!
#    studentIntake_hasTriedThisBefore:
#        name: hasTriedThisBefore
#        type: boolean
#        entity: "@studentIntake"
#    studentIntake_hasTriedThisBeforeExplanation:
#        name: hasTriedThisBeforeExplanation
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_whyWantTheseskills:
#        name: whyWantTheseskills
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_whyWantThisNow:
#        name: whyWantThisNow
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_desiredLearningMethod:
#        name: desiredLearningMethod
#        type: string
#        #select multiple
#        enum:
#          [
#                  "IN_A_GROUP",
#                  "ONE_ON_ONE",
#                  "HOME_ENVIRONMENT",
#                  "IN_LIBRARY_OR_OTHER",
#                  "ONLINE",
#          ]
#        multiple: true
#        entity: "@studentIntake"
#    studentIntake_remarks:
#        name: remarks
#        type: string
#        maxLength: 255
#        entity: "@studentIntake"
#    studentIntake_speakingLevel:
#        name: speakingLevel
#        type: string
#        enum: ["BEGINNER", "REASONABLE", "ADVANCED"]
#        entity: "@studentIntake"
#    studentIntake_readingTestResult:
#        name: readingTestResult
#        type: string
#        enum: ["CAN_NOT_READ", "A0", "A1", "A2", "B1", "B2", "C1", "C2"]
#        entity: "@studentIntake"
#    studentIntake_writingTestResult:
#        name: writingTestResult
#        type: string
#        enum:
#          [
#                  "CAN_NOT_WRITE",
#                  "WRITE_NAW_DETAILS",
#                  "WRITE_SIMPLE_TEXTS",
#                  "WRITE_SIMPLE_LETTERS",
#          ]
#        entity: "@studentIntake"
#    studentIntake_didSignPermissionForm:
#        name: didSignPermissionForm
#        type: boolean
#        entity: "@studentIntake"
#        required: true
#    studentIntake_hasPermissionToShareDataWithProviders:
#        name: hasPermissionToShareDataWithProviders
#        type: boolean
#        entity: "@studentIntake"
#        required: true
#    studentIntake_hasPermissionToShareDataWithLibraries:
#        name: hasPermissionToShareDataWithLibraries
#        type: boolean
#        entity: "@studentIntake"
#        required: true
#    studentIntake_hasPermissionToSendInformationAboutLibraries:
#        name: hasPermissionToSendInformationAboutLibraries
#        type: boolean
#        entity: "@studentIntake"
#        required: true
#    
#    # ReferringPerson Properties
#    referringPerson_givenName:
#        name: givenName
#        type: string
#        maxLength: 255
#        required: true;
#        entity: "@referringPerson"
#        persistToGateway: true
#    referringPerson_additionalName:
#        name: additionalName
#        type: string
#        maxLength: 255
#        entity: "@referringPerson"
#        persistToGateway: true
#    referringPerson_familyName:
#        name: familyName
#        type: string
#        maxLength: 255
#        entity: "@referringPerson"
#        required: true
#        persistToGateway: true
#    referringPerson_address:
#        name: addresses
#        type: object
#        multiple: true
#        entity: "@referringPerson"
#        object: "@address"
#        cascade: true
#        cascadeDelete: true
#    referringPerson_telephone:
#        name: telephones
#        type: object
#        multiple: true
#        entity: "@referringPerson"
#        object: "@telephone"
#        cascade: true
#        cascadeDelete: true
#    referringPerson_email:
#        name: emails
#        type: object
#        multiple: true
#        entity: "@referringPerson"
#        object: "@notUniqueEmail"
#        cascade: true
#        cascadeDelete: true
#    referringPerson_team:
#        name: team
#        type: string
#        entity: "@referringPerson"
#
#    # Education properties
#    education_name:
#        name: name
#        type: string
#        maxLength: 255
#        entity: "@education"
#        required: true
#    education_description:
#        name: description
#        type: string
#        maxLength: 255
#        entity: "@education"
#    education_type:
#        name: type
#        type: string
#        required: true
#        enum: ["EDUCATION", "COURSE"]
#        entity: "@education"
#    education_level:
#        name: level
#        type: string
#        enum:
#          [
#                  "basisonderwijs",
#                  "vmbo havo of vwo-onderbouw of mbo-1",
#                  "havo vwo of mbo (overig)",
#                  "hbo of wo bachelor",
#                  "hbo of wo master of doctor",
#          ]
#        entity: "@education"
#    education_institution:
#        name: institution
#        type: string
#        maxLength: 255
#        entity: "@education"
#    education_teacherType:
#        name: teachertype
#        type: string
#        enum: ["PROFESSIONAL", "VOLUNTEER", "BOTH"]
#        entity: "@education"
#    # TODO: ?
#    #        requiredIf:
#    #            type: COURSE
#    education_group:
#        name: group
#        type: string
#        enum: ["INDIVIDUALLY", "GROUP"]
#        entity: "@education"
#    # TODO: ?
#    #        requiredIf:
#    #            type: COURSE
#    education_startDate:
#        name: startDate
#        type: datetime
#        entity: "@education"
#    # TODO: ?
#    #        requiredIf:
#    #            type: EDUCATION
#    education_yearsFollowed: # changed (datetime) education_endDate to this
#        name: yearsFollowed
#        type: integer
#        entity: "@education"
#    # TODO: ?
#    #        requiredIf:
#    #            type: EDUCATION
#    education_hours:
#        name: hours
#        type: integer
#        description: The total amount of hours this education or course takes
#        entity: "@education"
#    # TODO: ?
#    #        requiredIf:
#    #            type: COURSE
#    education_degree:
#        name: degree
#        type: boolean
#        description: Whether tis eduction or course grants a degree or diploma
#        entity: "@education"
#    # TODO: DegreeGranted can only be true if endDate is in the past!
#    education_degreeGranted:
#        name: degreeGranted
#        description: Whether or not a degree or diploma has been granted from this eduction or course to the student
#        type: boolean
#        entity: "@education"
#
#    # Civic Integration properties
#    civicIntegration_requirement:
#        name: requirement
#        type: string
#        enum: ["YES", "NO", "CURRENTLY_WORKING_ON_INTEGRATION"]
#        entity: "@civicIntegration"
#    civicIntegration_reason:
#        name: reason
#        type: string
#        enum: ["FINISHED", "FROM_EU_COUNTRY", "EXEMPTED_OR_ZROUTE"]
#        entity: "@civicIntegration"
##        requiredIf:
##            requirement: NO #TODO!
#    civicIntegration_finishDate:
#        name: finishDate
#        type: datetime
#        entity: "@civicIntegration"
##        requiredIf:
##            requirement: CURRENTLY_WORKING_ON_INTEGRATION #TODO!
#
#    # LearningNeed properties
#    learningNeed_description:
#        name: description
#        type: string
#        required: true
#        maxLength: 255
#        entity: "@learningNeed"
#    learningNeed_motivation:
#        name: motivation
#        type: string
#        required: true
#        maxLength: 255
#        entity: "@learningNeed"
#    learningNeed_desiredOffer:
#        name: desiredOffer
#        type: string
#        required: true
#        maxLength: 255
#        entity: "@learningNeed"
#    learningNeed_advisedOffer:
#        name: advisedOffer
#        type: string
#        required: true
#        maxLength: 255
#        entity: "@learningNeed"
#    learningNeed_offerDifference:
#        name: offerDifference
#        type: string
#        required: true
#        enum:
#          ["NO", "YES_NOT_OFFERED_IN_TRAVEL_RANGE", "YES_QUEUE", "YES_OTHER"]
#        entity: "@learningNeed"
#    learningNeed_offerDifferenceOther:
#        name: offerDifferenceOther
#        type: string
#        entity: "@learningNeed"
##        requiredIf:
##            offerDifference: "YES_OTHER" #TODO!
#    learningNeed_agreements:
#        name: agreements
#        type: string
#        maxLength: 255
#        entity: "@learningNeed"
#    learningNeed_student:
#        name: student
#        type: object
#        required: true
#        entity: "@learningNeed"
#        object: "@student"
#        inversedBy: "@student_learningNeeds"
#    learningNeed_participations:
#        name: participations
#        type: object
#        multiple: true
#        entity: "@learningNeed"
#        object: "@participation"
#        inversedBy: "@participation_learningNeed"
#    learningNeed_learningResults:
#        name: learningResults
#        type: object
#        multiple: true
#        entity: "@learningNeed"
#        object: "@learningResult"
#        cascade: true
#        cascadeDelete: true
#        inversedBy: "@learningResult_learningNeed"
#
#    # LearningResult properties
#    learningResult_verb:
#        name: verb
#        type: string
#        maxLength: 255
#        required: true
#        entity: "@learningResult"
#    learningResult_subject:
#        name: subject
#        type: string
#        required: true
#        enum:
#          [
#                  "DUTCH_READ",
#                  "DUTCH_WRITE",
#                  "MATHEMATICS_NUMBERS",
#                  "MATHEMATICS_PROPORTIONS",
#                  "MATHEMATICS_MEASUREMENT_AND_GEOMETRY",
#                  "THEMATICS_RELATIONS",
#                  "DIGITAL_SKILLS_USING_ICT_SYSTEMS",
#                  "DIGITAL_SKILLS_LOOKING_FOR_INFORMATION",
#                  "DIGITAL_SKILLS_PROCESSING_AND_PRESENTING_INFORMATION",
#                  "DIGITAL_SKILLS_COMMUNICATION",
#                  "OTHER",
#          ]
#        entity: "@learningResult"
#    learningResult_subjectOther:
#        name: subjectOther
#        type: string
#        maxLength: 255
#        entity: "@learningResult"
##        requiredIf:
##            subject: "OTHER" #TODO!
#    learningResult_application:
#        name: application
#        type: string
#        required: true
#        enum:
#          [
#                  "FAMILY_AND_UPBRINGING",
#                  "LABOR_MARKET_AND_WORK",
#                  "HEALTH_AND_WELLBEING",
#                  "LIVING_AND_NEIGHBORHOOD",
#                  "SELF_SUSTAINABILITY",
#                  "OTHER",
#          ]
#        entity: "@learningResult"
#    learningResult_applicationOther:
#        name: applicationOther
#        type: string
#        maxLength: 255
#        entity: "@learningResult"
##        requiredIf:
##            application: "OTHER" #TODO!
#    learningResult_level:
#        name: level
#        type: string
#        required: true
#        enum: ["INFLUX", "NLQF_1", "NLQF_2", "NLQF_3", "NLQF_4", "OTHER"]
#        entity: "@learningResult"
#    learningResult_levelOther:
#        name: levelOther
#        type: string
#        maxLength: 255
#        entity: "@learningResult"
##        requiredIf:
##            level: "OTHER" #TODO!
#    learningResult_learningNeed:
#        name: learningNeed
#        type: object
#        entity: "@learningResult"
#        object: "@learningNeed"
#        inversedBy: "@learningNeed_learningResults"
#    learningResult_participation:
#        name: participation
#        type: object
#        entity: "@learningResult"
#        object: "@participation"
#        inversedBy: "@participation_learningResult"
#    learningResult_testResult:
#        name: testResult
#        type: object
#        entity: "@learningResult"
#        object: "@testResult"
#        inversedBy: "@testResult_learningNeedOutCome"
#
#    # participation properties
#    participation_learningNeed:
#        name: learningNeed
#        type: object
#        required: true
#        entity: "@participation"
#        object: "@learningNeed"
#        inversedBy: "@learningNeed_participations"
#    participation_status:
#        name: status
#        type: string
#        enum: ["REFERRED", "ACTIVE", "COMPLETED"]
#        defaultValue: "REFERRED"
#        entity: "@participation"
#        searchable: true
#    #        unsetable: true // todo?
#    participation_providerOption:
#        name: providerOption
#        type: string
#        required: true
#        enum: ["PROVIDER", "OTHER"]
#        entity: "@participation"
#    #        immutable: true // todo?
#    participation_provider:
#        name: provider
#        type: object
#        entity: "@participation"
#        object: "@organization"
##        requiredIf:
##            providerOption: "PROVIDER" #TODO!
#    participation_providerOther:
#        name: providerOther
#        type: string
#        maxLength: 255
#        entity: "@participation"
##        requiredIf:
##            providerOption: "OTHER" #TODO!
#    participation_explanation:
#        name: explanation
#        type: string
#        maxLength: 2555
#        entity: "@participation"
##        requiredIf:
##            providerOption: "PROVIDER" #TODO!
#    participation_startParticipation:
#        name: startParticipation
#        type: date
#        entity: "@participation"
#        defaultValue: "NOW"
#        nullable: false
#    participation_endParticipation:
#        name: endParticipation
#        type: date
#        entity: "@participation"
#    participation_reasonEndParticipation:
#        name: reasonEndParticipation
#        type: string
#        enum:
#          [
#                  "MOVED",
#                  "WORK",
#                  "ILLNESS+HEALTH",
#                  "DECEASED",
#                  "COMPLETED_SUCCESSFULLY",
#                  "FAMILY_CIRCUMSTANCES",
#                  "DOES_NOT_MEET_PARTICIPANT_EXPECTATIONS",
#                  "OTHER",
#          ]
#        entity: "@participation"
#    participation_offerName:
#        name: offerName
#        type: string
#        maxLength: 255
#        entity: "@participation"
##        requiredIf:
##            providerOption: "OTHER" #TODO!
#    participation_offerType:
#        name: offerType
#        type: string
#        enum: ["LANGUAGE", "MATHEMATICS", "DIGITAL_SKILLS", "OTHER"]
#        entity: "@participation"
##        requiredIf:
##            providerOption: "OTHER" #TODO!
#    participation_formality:
#        name: formality
#        type: string
#        enum: ["FORMAL", "INFORMAL"]
#        entity: "@participation"
##        requiredIf:
##            providerOption: "OTHER" #TODO!
#    participation_groupFormation:
#        name: groupFormation
#        type: string
#        enum: ["INDIVIDUALLY", "IN_A_GROUP"]
#        entity: "@participation"
##        requiredIf:
##            providerOption: "OTHER" #TODO!
#    participation_hours:
#        name: hours
#        type: integer
#        entity: "@participation"
#    participation_degree:
#        name: degree
#        type: boolean
#        entity: "@participation"
##        requiredIf:
##            providerOption: "OTHER" #TODO!
#    participation_start:
#        name: start
#        type: date
#        entity: "@participation"
#    participation_end:
#        name: end
#        type: date
#        entity: "@participation"
#    participation_agreement:
#        name: agreement
#        type: string
#        maxLength: 2550
#        entity: "@participation"
#    participation_learningResult:
#        name: learningResult
#        type: object
#        entity: "@participation"
#        object: "@learningResult"
#        inversedBy: "@learningResult_participation"
#        cascade: true
#    # TODO: ?
#    #        requiredIf:
#    #            providerOption: 'OTHER'
#    participation_testResults:
#        name: testResults
#        type: object
#        entity: "@participation"
#        object: "@testResult"
#        inversedBy: "@testResult_participation"
#
#    # TestResult properties
#    testResult_participation:
#        name: participation
#        type: object
#        required: true
#        entity: "@testResult"
#        object: "@participation"
#        inversedBy: "@participation_testResults"
#    testResult_learningNeedOutCome:
#        name: learningNeedOutCome
#        type: object
#        required: true
#        entity: "@testResult"
#        object: "@learningResult"
#        cascade: true
#        cascadeDelete: true
#        inversedBy: "@learningResult_testResult"
#    testResult_memo:
#        name: memo
#        type: string
#        maxLength: 2555
#        entity: "@testResult"
#    testResult_examDate:
#        name: examDate
#        type: date
#        entity: "@testResult"
#    testResult_usedExam:
#        name: usedExam
#        type: string
#        maxLength: 255
#        entity: "@testResult"
#
#    # Document properties
#    document_participant:
#        name: participant
#        type: object
#        required: true
#        entity: "@document"
#        object: "@student"
#    #        inversedBy: '@student_documents' #todo ?
#    document_file:
#        name: file
#        type: file
#        required: true
#        #        multiple: true
#        maxFileSize: 550000
#        fileTypes: # see function mimeToExt() in ValidationService
#          [
#                  "application/pdf",
#                  "text/plain",
#                  "text/xml",
#                  "text/json",
#                  "text/x-comma-separated-values",
#                  "text/comma-separated-values",
#                  "application/vnd.msexcel",
#                  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
#                  "video/mp4",
#                  "audio/mp3",
#                  "image/png",
#                  "image/x-png",
#                  "image/jpeg",
#                  "image/pjpeg",
#          ]
#        entity: "@document"
#
#    # ContactMoment properties
#    contactMoment_employee:
#        name: employee
#        type: object
#        entity: "@contactMoment"
#        object: "@employee"
#    contactMoment_student:
#        name: student
#        type: object
#        required: true
#        entity: "@contactMoment"
#        object: "@student"
#    contactMoment_type:
#        name: type
#        type: string
#        required: true
#        enum:
#          [
#                  "REMARK",
#                  "INFORMATION-FOR-STORYTELLING",
#                  "INTAKE",
#                  "FOLLOW-UP_TALK",
#                  "FINAL_TALK",
#          ]
#        entity: "@contactMoment"
#    contactMoment_date:
#        name: date
#        type: date
#        required: true
#        entity: "@contactMoment"
#    contactMoment_explanation:
#        name: explanation
#        type: string
#        maxLength: 2500
#        required: true
#        entity: "@contactMoment"
#
#    # PostalCode properties
#    postalCode_code:
#        name: code
#        type: integer
#        required: true
#        entity: "@postalCode"
#        searchable: true
#        mustBeUnique: true
#        format: dutch_pc4
#    postalCode_languageHouse:
#        name: languageHouse
#        type: object
#        required: true
#        entity: "@postalCode"
#        object: "@organization"
#        inversedBy: "@organization_languageHouse_postalCodes"
#    postalCode_team:
#        name: team
#        type: object
#        entity: "@postalCode"
#        object: "@organization"
#        inversedBy: "@organization_team_postalCodes"
#    
#    #share student
#    shareStudent_student:
#        name: student
#        type: object
#        required: true
#        description: The student that you want to share
#        entity: "@shareStudent"
#        object: "@student"
#    shareStudent_email:
#        name: email
#        type: string
#        format: email
#        required: true
#        description: The eMail addres thats should recieve the student pdf
#        entity: "@shareStudent"
#
#
## Basic setup for student download
#
#App\Entity\Document:
#    # User object
#    studentDownload:
#        name: studentDownload
#        data: "data"
#        data_id: "data_id"
#        route: "studentDownload"
#        object: "@student"
#        documentCreationService: "https://taalhuizen-bisc.commonground.nu/api/v1/document-creation-service/templates/123d8c1b-9d2b-4e16-9307-c02e32421ed8/render/pdf"
#        documentType: student
#        type: twig
#        content: "placeholder, change me!" #to: "<html><head><link rel='preconnect' href='https://fonts.googleapis.com'><link rel='preconnect' href='https://fonts.gstatic.com' crossorigin><link href='https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap' rel='stylesheet'><style>html * {font-family: 'Source Sans Pro', sans-serif;}</style></head><body><h4 style='text-align: right'>{{'now'|date('d/m/Y')}}</h4><h1>Gegevens {{ person.givenName~' ' }}{% if person.additionalName|default %}{{ person.additionalName~' ' }}{%endif%}{{person.familyName}}</h1><h3>Persoonsgegevens{% if person.gender|default %}<p>Geslacht: {{person.gender}}</p>{% endif %}{% if person.Geboorteday|default %}<p>Geboortedag: {{person.Geboorteday}}</p>{% endif %}{% if person|default %} <p>Geboorteplaats: {{person.Geboorteplace}}</p>{% endif %}{% if person.primaryLanguage|default %}<p>Moedertaal: {{person.primaryLanguage}}</p>{% endif %}{% if person.speakingLanguages|default %}<p>Spreektalen: {{person.speakingLanguages}}</p>{% endif %}{% if person.country|default %}<p>Land: {{person.country}}</p>{% endif %}<br><h3>Contactgegevens</h3><p>Emails: </p>{% if person.emails|default %}<ul><li>{{person.emails[0].email}}</li></ul>{% endif %}{% if person.telephones|default %}<p>Telefoonnummers: </p>{% if person.telephones|default %}<ul><li>{{person.telephones[0].telephone}}</li></ul>{% endif %}{% endif %}{% if intake|default %}<br><h3>Intake gegevens</h3>{% if intake.dutchNTLevel|default %}<p>NT level: {{intake.dutchNTLevel}}</p>{% endif %}{% if intake.dutchNTLevel|default %}<p>Laatst bekende level: {{intake.lastKnownLevel}}</p>{% endif %}{% if intake.speakingLevel|default %}<p>Spreekniveau: {{intake.speakingLevel}}</p>{% endif %}{% if intake.readingTestResult|default %}<p>Leestoets resultaat: {{intake.readingTestResult}}</p>{% endif %}{% if intake.readingTestResult|default %}<p>Schrijftoets resultaat: {{intake.writingTestResult}}</p>{% endif %}{% if intake.remarks|default %}<p>Opmerkingen aanbieder: {{intake.remarks}}</p>{% endif %}{% endif %}{% if learningNeeds|default %}<br><h3>Leervragen</h3>{% for key, need in learningNeeds %}<h4>Leervraag {{ key + 1 }}</h4>{% if need.description|default %}<p>Beschrijving: {{need.description}}</p>{% endif %}{% if need.motivation|default %}<p>Motivatie: {{need.motivation}}</p>{% endif %}{% if need.learningResults|default %}<h5>Gewenste leeruitkomst</h5>{% if need.learningResults[0].verb|default %}<p>Werkwoord: {{need.learningResults[0].verb}}</p>{% endif %}{% if need.learningResults[0].subject|default %}<p>Onderwerp: {{need.learningResults[0].subject}}</p>{% if need.learningResults[0].subject == \"OTHER\" %}<p>Onderwerp: Anders, namelijk: {{need.learningResults[0].subjectOther}}</p>{% endif %}{% endif %}{% if need.learningResults[0].application|default %}<p>Toepassing: {{need.learningResults[0].application}}</p>{% if need.learningResults[0].application == \"OTHER\" %}<p>Toepassing: Anders, namelijk: {{need.learningResults[0].applicationOther}}</p>{% endif %}{% endif %}{% if need.learningResults[0].level|default %}<p>Niveau: {{need.learningResults[0].level}}</p>{% if need.learningResults[0].level == \"OTHER\" %}<p>Niveau: Anders, namelijk: {{need.learningResults[0].levelOther}}</p>{% endif %}{% endif %}{% endif %}<h5>Aanbod</h5>{% if need.desiredOffer|default %}<p>Aanbod: {{need.desiredOffer}}</p>{% endif %}{% if need.advisedOffer|default %}<p>Geadviseerd aanbod: {{need.advisedOffer}}</p>{% endif %}{% if need.offerDifference|default %}<p>Verschil tussen wens en advies: {{need.offerDifference}}</p>{% if need.offerDifference == \"YES_OTHER\" %}<p>Verschil: Ja, want: anders: {{need.offerDifferenceOther}}</p>{% endif %}{% endif %}{% if need.agreements|default %}<p>Afspraken: {{need.agreements}}</p>{% endif %}<br>{% endfor %}{% endif %}</body></html>"
#
#
## Parameters for endpoint regex
#parameters:
#    userItemRegex: '^users/[a-z0-9-]{36}$'
#    userGroupItemRegex: '^user_groups/[a-z0-9-]{36}$'
#    organizationItemRegex: '^organizations/[a-z0-9-]{36}$'
#    emailItemRegex: '^emails/[a-z0-9-]{36}$'
#    telephoneItemRegex: '^telephones/[a-z0-9-]{36}$'
#    addressItemRegex: '^addresses/[a-z0-9-]{36}$'
#    personItemRegex: '^people/[a-z0-9-]{36}$'
#    employeeItemRegex: '^employees/[a-z0-9-]{36}$'
#    studentItemRegex: '^students/[a-z0-9-]{36}$'
#    learningNeedItemRegex: '^learning_needs/[a-z0-9-]{36}$'
#    learningResultItemRegex: '^learning_results/[a-z0-9-]{36}$'
#    participationItemRegex: '^participations/[a-z0-9-]{36}$'
#    testResultItemRegex: '^test_results/[a-z0-9-]{36}$'
#    documentItemRegex: '^documents/[a-z0-9-]{36}$'
#    contactMomentItemRegex: '^contact_moments/[a-z0-9-]{36}$'
#    postalCodeItemRegex: '^postal_codes/[a-z0-9-]{36}$'
#    shareStudentItemRegex: '^share_students/[a-z0-9-]{36}$'
#
#
## Endpoints
#App\Entity\Endpoint:
#    # User Endpoints
#    userEndpointGet:
#        name: User endpoint get collection
#        description: endpoint voor het ophalen van alles users
#        path: ['users']
#        pathRegex: "^(users)$"
#        method: GET
#        operationType: collection
#        
#    userEndpointPost:
#        name: User endpoint post
#        description: endpoint voor het toevoegen van een nieuwe user
#        path: [ 'users' ]
#        pathRegex: "^(users)$"
#        method: POST
#        operationType: collection
#
#    userEndpointGetItem:
#        name: User endpoint get item
#        description: endpoint voor het ophalen van een user
#        path: ['users', '{id}']
#        pathRegex: <{userItemRegex}>
#        method: GET
#        operationType: item
#
#    userEndpointPut:
#        name: User endpoint put
#        description: endpoint voor het wijzigen van een user
#        path: ['users', '{id}']
#        pathRegex: <{userItemRegex}>
#        method: PUT
#        operationType: item
#    
#    userEndpointDelete:
#        name: User endpoint delete
#        description: endpoint voor het verwijderen van een user
#        path: ['users', '{id}']
#        pathRegex: <{userItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # UserGroup Endpoints
#    userGroupEndpointGet:
#        name: UserGroup endpoint get collection
#        description: endpoint voor het ophalen van alles userGroups
#        path: ['user_groups']
#        pathRegex: "^(user_groups)$"
#        method: GET
#        operationType: collection
#    
#    userGroupEndpointPost:
#        name: UserGroup endpoint post
#        description: endpoint voor het toevoegen van een nieuwe userGroup
#        path: [ 'user_groups' ]
#        pathRegex: "^(user_groups)$"
#        method: POST
#        operationType: collection
#
#    userGroupEndpointGetItem:
#        name: UserGroup endpoint get item
#        description: endpoint voor het ophalen van een userGroup
#        path: ['user_groups', '{id}']
#        pathRegex: <{userGroupItemRegex}>
#        method: GET
#        operationType: item
#
#    userGroupEndpointPut:
#        name: UserGroup endpoint put
#        description: endpoint voor het wijzigen van een userGroup
#        path: ['user_groups', '{id}']
#        pathRegex: <{userGroupItemRegex}>
#        method: PUT
#        operationType: item
#    
#    userGroupEndpointDelete:
#        name: UserGroup endpoint delete
#        description: endpoint voor het verwijderen van een userGroup
#        path: ['user_groups', '{id}']
#        pathRegex: <{userGroupItemRegex}>
#        method: DELETE
#        operationType: item
#        
#    # Organization Endpoints
#    organizationEndpointGet:
#        name: Organization endpoint get collection
#        description: endpoint for organizations
#        path: [ 'organizations' ]
#        pathRegex: "^organizations$"
#        method: GET
#        operationType: collection
#
#    organizationEndpointPost:
#        name: Organization endpoint post
#        description: endpoint for organizations
#        path: [ 'organizations' ]
#        pathRegex: "^organizations$"
#        method: POST
#        operationType: collection
#
#    organizationEndpointGetItem:
#        name: Organization endpoint get item
#        description: endpoint for organizations
#        path: [ 'organizations', '{id}' ]
#        pathRegex: <{organizationItemRegex}>
#        method: GET
#        operationType: item
#
#    organizationEndpointPut:
#        name: Organization endpoint put
#        description: endpoint for organizations
#        path: [ 'organizations', '{id}' ]
#        pathRegex: <{organizationItemRegex}>
#        method: PUT
#        operationType: item
#
#    organizationEndpointDelete:
#        name: Organization endpoint delete
#        description: endpoint for organizations
#        path: [ 'organizations', '{id}' ]
#        pathRegex: <{organizationItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # Email Endpoints
#    emailEndpointGet:
#        name: Email endpoint get collection
#        description: endpoint for emails
#        path: [ 'emails' ]
#        pathRegex: "^(emails)$"
#        method: GET
#        operationType: collection
#
#    emailEndpointPost:
#        name: Email endpoint post
#        description: endpoint for emails
#        path: [ 'emails' ]
#        pathRegex: "^(emails)$"
#        method: POST
#        operationType: collection
#
#    emailEndpointGetItem:
#        name: Email endpoint get item
#        description: endpoint for emails
#        path: [ 'emails', '{id}' ]
#        pathRegex: <{emailItemRegex}>
#        method: GET
#        operationType: item
#
#    emailEndpointPut:
#        name: Email endpoint put
#        description: endpoint for emails
#        path: [ 'emails', '{id}' ]
#        pathRegex: <{emailItemRegex}>
#        method: PUT
#        operationType: item
#
#    emailEndpointDelete:
#        name: Email endpoint delete
#        description: endpoint for emails
#        path: [ 'emails', '{id}' ]
#        pathRegex: <{emailItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # Telephone Endpoints
#    telephoneEndpointGet:
#        name: Telephone endpoint get collection
#        description: endpoint for telephones
#        path: [ 'telephones' ]
#        pathRegex: "^(telephones)$"
#        method: GET
#        operationType: collection
#
#    telephoneEndpointPost:
#        name: Telephone endpoint post
#        description: endpoint for telephones
#        path: [ 'telephones' ]
#        pathRegex: "^(telephones)$"
#        method: POST
#        operationType: collection
#
#    telephoneEndpointGetItem:
#        name: Telephone endpoint get item
#        description: endpoint for telephones
#        path: [ 'telephones', '{id}' ]
#        pathRegex: <{telephoneItemRegex}>
#        method: GET
#        operationType: item
#
#    telephoneEndpointPut:
#        name: Telephone endpoint put
#        description: endpoint for telephones
#        path: [ 'telephones', '{id}' ]
#        pathRegex: <{telephoneItemRegex}>
#        method: PUT
#        operationType: item
#
#    telephoneEndpointDelete:
#        name: Telephone endpoint delete
#        description: endpoint for telephones
#        path: [ 'telephones', '{id}' ]
#        pathRegex: <{telephoneItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # Address Endpoints
#    addressEndpointGet:
#        name: Address endpoint get collection
#        description: endpoint for addresses
#        path: [ 'addresses' ]
#        pathRegex: "^(addresses)$"
#        method: GET
#        operationType: collection
#
#    addressEndpointPost:
#        name: Address endpoint post
#        description: endpoint for addresses
#        path: [ 'addresses' ]
#        pathRegex: "^(addresses)$"
#        method: POST
#        operationType: collection
#
#    addressEndpointGetItem:
#        name: Address endpoint get item
#        description: endpoint for addresses
#        path: [ 'addresses', '{id}' ]
#        pathRegex: <{addressItemRegex}>
#        method: GET
#        operationType: item
#
#    addressEndpointPut:
#        name: Address endpoint put
#        description: endpoint for addresses
#        path: [ 'addresses', '{id}' ]
#        pathRegex: <{addressItemRegex}>
#        method: PUT
#        operationType: item
#
#    addressEndpointDelete:
#        name: Address endpoint delete
#        description: endpoint for addresses
#        path: [ 'addresses', '{id}' ]
#        pathRegex: <{addressItemRegex}>
#        method: DELETE
#        operationType: item
#        
#    # Person Endpoints
#    personEndpointGet:
#        name: Person endpoint get collection
#        description: endpoint for people
#        path: [ 'people' ]
#        pathRegex: "^(people)$"
#        method: GET
#        operationType: collection
#
#    personEndpointPost:
#        name: Person endpoint post
#        description: endpoint for people
#        path: [ 'people' ]
#        pathRegex: "^(people)$"
#        method: POST
#        operationType: collection
#
#    personEndpointGetItem:
#        name: Person endpoint get item
#        description: endpoint for people
#        path: [ 'people', '{id}' ]
#        pathRegex: <{personItemRegex}>
#        method: GET
#        operationType: item
#
#    personEndpointPut:
#        name: Person endpoint put
#        description: endpoint for people
#        path: [ 'people', '{id}' ]
#        pathRegex: <{personItemRegex}>
#        method: PUT
#        operationType: item
#
#    personEndpointDelete:
#        name: Person endpoint delete
#        description: endpoint for people
#        path: [ 'people', '{id}' ]
#        pathRegex: <{personItemRegex}>
#        method: DELETE
#        operationType: item
#
#    #employee Endpoints   
#    employeeEndpointGet:
#        name: employee endpoint get collection
#        description: endpoint voor het ophalen van alle employees
#        path: ['employees']
#        pathRegex: "^(employees)$"
#        method: GET
#        operationType: collection
#    
#    employeeEndpointPost:
#        name: employee endpoint post
#        description: endpoint voor het toevoegen van een nieuwe employee
#        path: [ 'employees' ]
#        pathRegex: "^(employees)$"
#        method: POST
#        operationType: collection
#
#    employeeEndpointGetItem:
#        name: employee endpoint get item
#        description: endpoint voor het ophalen van een employee
#        path: ['employees', '{id}']
#        pathRegex: <{employeeItemRegex}>
#        method: GET
#        operationType: item
#
#    employeeEndpointPut:
#        name: employee endpoint put
#        description: endpoint voor het wijzigen van een employee
#        path: ['employees', '{id}']
#        pathRegex: <{employeeItemRegex}>
#        method: PUT
#        operationType: item
#    
#    employeeEndpointDelete:
#        name: employee endpoint delete
#        description: endpoint voor het verwijderen van een employee
#        path: ['employees', '{id}']
#        pathRegex: <{employeeItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # student Endpoints   
#    studentEndpointGet:
#        name: student endpoint get collection
#        description: endpoint voor het ophalen van alle students
#        path: ['students']
#        pathRegex: "^(students)$"
#        method: GET
#        operationType: collection
#    
#    studentEndpointPost:
#        name: student endpoint post
#        description: endpoint voor het toevoegen van een nieuwe student
#        path: [ 'students' ]
#        pathRegex: "^(students)$"
#        method: POST
#        operationType: collection
#
#    studentEndpointGetItem:
#        name: student endpoint get item
#        description: endpoint voor het ophalen van een student
#        path: ['students', '{id}']
#        pathRegex: <{studentItemRegex}>
#        method: GET
#        operationType: item
#
#    studentEndpointPut:
#        name: student endpoint put
#        description: endpoint voor het wijzigen van een student
#        path: ['students', '{id}']
#        pathRegex: <{studentItemRegex}>
#        method: PUT
#        operationType: item
#    
#    studentEndpointDelete:
#        name: student endpoint delete
#        description: endpoint voor het verwijderen van een student
#        path: ['students', '{id}']
#        pathRegex: <{studentItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # learningNeed Endpoints
#    learningNeedEndpointGet:
#        name: learningNeed endpoint get collection
#        description: endpoint voor het ophalen van alle learningNeeds
#        path: ['learning_needs']
#        pathRegex: "^(learning_needs)$"
#        method: GET
#        operationType: collection
#        
#    learningNeedEndpointPost:
#        name: learningNeed endpoint post
#        description: endpoint voor het toevoegen van een nieuwe learningNeed
#        path: [ 'learning_needs' ]
#        pathRegex: "^(learning_needs)$"
#        method: POST
#        operationType: collection
#
#    learningNeedEndpointGetItem:
#        name: learningNeed endpoint get item
#        description: endpoint voor het ophalen van een learningNeed
#        path: ['learning_needs', '{id}']
#        pathRegex: <{learningNeedItemRegex}>
#        method: GET
#        operationType: item
#
#    learningNeedEndpointPut:
#        name: learningNeed endpoint put
#        description: endpoint voor het wijzigen van een learningNeed
#        path: ['learning_needs', '{id}']
#        pathRegex: <{learningNeedItemRegex}>
#        method: PUT
#        operationType: item
#    
#    learningNeedEndpointDelete:
#        name: learningNeed endpoint delete
#        description: endpoint voor het verwijderen van een learningNeed
#        path: ['learning_needs', '{id}']
#        pathRegex: <{learningNeedItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # learningResult Endpoints
#    learningResultEndpointGet:
#        name: learningResult endpoint get collection
#        description: endpoint voor het ophalen van alle learningResults
#        path: ['learning_results']
#        pathRegex: "^(learning_results)$"
#        method: GET
#        operationType: collection
#        
#    learningResultEndpointPost:
#        name: learningResult endpoint post
#        description: endpoint voor het toevoegen van een nieuwe learningResult
#        path: [ 'learning_results' ]
#        pathRegex: "^(learning_results)$"
#        method: POST
#        operationType: collection
#
#    learningResultEndpointGetItem:
#        name: learningResult endpoint get item
#        description: endpoint voor het ophalen van een learningResult
#        path: ['learning_results', '{id}']
#        pathRegex: <{learningResultItemRegex}>
#        method: GET
#        operationType: item
#
#    learningResultEndpointPut:
#        name: learningResult endpoint put
#        description: endpoint voor het wijzigen van een learningResult
#        path: ['learning_results', '{id}']
#        pathRegex: <{learningResultItemRegex}>
#        method: PUT
#        operationType: item
#    
#    learningResultEndpointDelete:
#        name: learningResult endpoint delete
#        description: endpoint voor het verwijderen van een learningResult
#        path: ['learning_results', '{id}']
#        pathRegex: <{learningResultItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # Participation Endpoints
#    participationEndpointGet:
#        name: participation endpoint get collection
#        description: endpoint voor het ophalen van alle participations
#        path: ['participations']
#        pathRegex: "^(participations)$"
#        method: GET
#        operationType: collection
#        
#    participationEndpointPost:
#        name: participation endpoint post
#        description: endpoint voor het toevoegen van een nieuwe participation
#        path: [ 'participations' ]
#        pathRegex: "^(participations)$"
#        method: POST
#        operationType: collection
#
#    participationEndpointGetItem:
#        name: participation endpoint get item
#        description: endpoint voor het ophalen van een participation
#        path: ['participations', '{id}']
#        pathRegex: <{participationItemRegex}>
#        method: GET
#        operationType: item
#
#    participationEndpointPut:
#        name: participation endpoint put
#        description: endpoint voor het wijzigen van een participation
#        path: ['participations', '{id}']
#        pathRegex: <{participationItemRegex}>
#        method: PUT
#        operationType: item
#    
#    participationEndpointDelete:
#        name: participation endpoint delete
#        description: endpoint voor het verwijderen van een participation
#        path: ['participations', '{id}']
#        pathRegex: <{participationItemRegex}>
#        method: DELETE
#        operationType: item
#
#    # shareStudent Endpoints
#    shareStudentEndpointGet:
#        name: shareStudent endpoint get collection
#        description: endpoint voor het ophalen van alle shareStudents
#        path: ['share_students']
#        pathRegex: "^(share_students)$"
#        method: GET
#        operationType: collection
#        
#    shareStudentEndpointPost:
#        name: shareStudent endpoint post
#        description: endpoint voor het toevoegen van een nieuwe shareStudent
#        path: [ 'share_students' ]
#        pathRegex: "^(share_students)$"
#        method: POST
#        operationType: collection
#
#    shareStudentEndpointGetItem:
#        name: shareStudent endpoint get item
#        description: endpoint voor het ophalen van een shareStudent
#        path: ['share_students', '{id}']
#        pathRegex: <{shareStudentItemRegex}>
#        method: GET
#        operationType: item
#
#    shareStudentEndpointPut:
#        name: shareStudent endpoint put
#        description: endpoint voor het wijzigen van een shareStudent
#        path: ['share_students', '{id}']
#        pathRegex: <{shareStudentItemRegex}>
#        method: PUT
#        operationType: item
#    
#    shareStudentEndpointDelete:
#        name: shareStudent endpoint delete
#        description: endpoint voor het verwijderen van een shareStudent
#        path: ['share_students', '{id}']
#        pathRegex: <{shareStudentItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # testResult Endpoints
#    testResultEndpointGet:
#        name: testResult endpoint get collection
#        description: endpoint voor het ophalen van alle testResults
#        path: ['test_results']
#        pathRegex: "^(test_results)$"
#        method: GET
#        operationType: collection
#        
#    testResultEndpointPost:
#        name: testResult endpoint post
#        description: endpoint voor het toevoegen van een nieuwe testResult
#        path: [ 'test_results' ]
#        pathRegex: "^(test_results)$"
#        method: POST
#        operationType: collection
#
#    testResultEndpointGetItem:
#        name: testResult endpoint get item
#        description: endpoint voor het ophalen van een testResult
#        path: ['test_results', '{id}']
#        pathRegex: <{testResultItemRegex}>
#        method: GET
#        operationType: item
#
#    testResultEndpointPut:
#        name: testResult endpoint put
#        description: endpoint voor het wijzigen van een testResult
#        path: ['test_results', '{id}']
#        pathRegex: <{testResultItemRegex}>
#        method: PUT
#        operationType: item
#    
#    testResultEndpointDelete:
#        name: testResult endpoint delete
#        description: endpoint voor het verwijderen van een testResult
#        path: ['test_results', '{id}']
#        pathRegex: <{testResultItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # document Endpoints
#    documentEndpointGet:
#        name: document endpoint get collection
#        description: endpoint voor het ophalen van alles documents
#        path: ['documents']
#        pathRegex: "^(documents)$"
#        method: GET
#        operationType: collection
#        
#    documentEndpointPost:
#        name: document endpoint post
#        description: endpoint voor het toevoegen van een nieuwe document
#        path: [ 'documents' ]
#        pathRegex: "^(documents)$"
#        method: POST
#        operationType: collection
#
#    documentEndpointGetItem:
#        name: document endpoint get item
#        description: endpoint voor het ophalen van een document
#        path: ['documents', '{id}']
#        pathRegex: <{documentItemRegex}>
#        method: GET
#        operationType: item
#
#    documentEndpointPut:
#        name: document endpoint put
#        description: endpoint voor het wijzigen van een document
#        path: ['documents', '{id}']
#        pathRegex: <{documentItemRegex}>
#        method: PUT
#        operationType: item
#    
#    documentEndpointDelete:
#        name: document endpoint delete
#        description: endpoint voor het verwijderen van een document
#        path: ['documents', '{id}']
#        pathRegex: <{documentItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # contactMoment Endpoints
#    contactMomentEndpointGet:
#        name: contactMoment endpoint get collection
#        description: endpoint voor het ophalen van alle contactMoments
#        path: ['contact_moments']
#        pathRegex: "^(contact_moments)$"
#        method: GET
#        operationType: collection
#        
#    contactMomentEndpointPost:
#        name: contactMoment endpoint post
#        description: endpoint voor het toevoegen van een nieuwe contactMoment
#        path: [ 'contact_moments' ]
#        pathRegex: "^(contact_moments)$"
#        method: POST
#        operationType: collection
#
#    contactMomentEndpointGetItem:
#        name: contactMoment endpoint get item
#        description: endpoint voor het ophalen van een contactMoment
#        path: ['contact_moments', '{id}']
#        pathRegex: <{contactMomentItemRegex}>
#        method: GET
#        operationType: item
#
#    contactMomentEndpointPut:
#        name: contactMoment endpoint put
#        description: endpoint voor het wijzigen van een contactMoment
#        path: ['contact_moments', '{id}']
#        pathRegex: <{contactMomentItemRegex}>
#        method: PUT
#        operationType: item
#    
#    contactMomentEndpointDelete:
#        name: contactMoment endpoint delete
#        description: endpoint voor het verwijderen van een contactMoment
#        path: ['contact_moments', '{id}']
#        pathRegex: <{contactMomentItemRegex}>
#        method: DELETE
#        operationType: item
#    
#    # postalCode Endpoints
#    postalCodeEndpointGet:
#        name: postalCode endpoint get collection
#        description: endpoint voor het ophalen van alles postalCodes
#        path: ['postal_codes']
#        pathRegex: "^(postal_codes)$"
#        method: GET
#        operationType: collection
#        
#    postalCodeEndpointPost:
#        name: postalCode endpoint post
#        description: endpoint voor het toevoegen van een nieuwe postalCode
#        path: [ 'postal_codes' ]
#        pathRegex: "^(postal_codes)$"
#        method: POST
#        operationType: collection
#
#    postalCodeEndpointGetItem:
#        name: postalCode endpoint get item
#        description: endpoint voor het ophalen van een postalCode
#        path: ['postal_codes', '{id}']
#        pathRegex: <{postalCodeItemRegex}>
#        method: GET
#        operationType: item
#
#    postalCodeEndpointPut:
#        name: postalCode endpoint put
#        description: endpoint voor het wijzigen van een postalCode
#        path: ['postal_codes', '{id}']
#        pathRegex: <{postalCodeItemRegex}>
#        method: PUT
#        operationType: item
#    
#    postalCodeEndpointDelete:
#        name: postalCode endpoint delete
#        description: endpoint voor het verwijderen van een postalCode
#        path: ['postal_codes', '{id}']
#        pathRegex: <{postalCodeItemRegex}>
#        method: DELETE
#        operationType: item
#        
## Handlers
#App\Entity\Handler:
#    # User Handler
#    userHandler:
#        name: User handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@userEndpointGet", "@userEndpointPost", "@userEndpointGetItem", "@userEndpointPut", "@userEndpointDelete"]
#        entity: "@user"
#        
#    # UserGroup Handler
#    userGroupHandler:
#        name: UserGroup handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@userGroupEndpointGet", "@userGroupEndpointPost", "@userGroupEndpointGetItem", "@userGroupEndpointPut", "@userGroupEndpointDelete"]
#        entity: "@usergroup"
#        
#    # Organization Handler
#    organizationHandler:
#        name: Organization handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@organizationEndpointGet", "@organizationEndpointPost", "@organizationEndpointGetItem", "@organizationEndpointPut", "@organizationEndpointDelete" ]
#        entity: "@organization"
#
#    # Email Handler
#    emailHandler:
#        name: Email handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@emailEndpointGet", "@emailEndpointPost", "@emailEndpointGetItem", "@emailEndpointPut", "@emailEndpointDelete" ]
#        entity: "@email"
#
#    # Telephone Handler
#    telephoneHandler:
#        name: Telephone handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@telephoneEndpointGet", "@telephoneEndpointPost", "@telephoneEndpointGetItem", "@telephoneEndpointPut", "@telephoneEndpointDelete" ]
#        entity: "@telephone"
#
#    # Address Handler
#    addressHandler:
#        name: Address handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@addressEndpointGet", "@addressEndpointPost", "@addressEndpointGetItem", "@addressEndpointPut", "@addressEndpointDelete" ]
#        entity: "@address"
#        
#    # Person Handler
#    personHandler:
#        name: Person handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@personEndpointGet", "@personEndpointPost", "@personEndpointGetItem", "@personEndpointPut", "@personEndpointDelete" ]
#        entity: "@person"
#
#    # Employee Handler
#    employeeHandler: 
#        name: Employee Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@employeeEndpointGet", "@employeeEndpointPost", "@employeeEndpointGetItem", "@employeeEndpointPut", "@employeeEndpointDelete"]
#        entity: "@employee"
#
#     # Student Handler
#    studentHandler: 
#        name: Student Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@studentEndpointGet", "@studentEndpointPost", "@studentEndpointPut", "@studentEndpointDelete"]
#        entity: "@student"
#        
#    # Student Handler
#    studentGetItemHandler:
#        name: Student get item Handler
#        methods: [ "*" ]
#        sequence: 0
#        conditions: "{}"
#        endpoints: [ "@studentEndpointGetItem" ]
#        entity: "@student"
#        methodOverrides:
#            GET:
#                - { queryParameters: { 'fields': [civicIntegration, educations, intake, languageHouse.name, languageHouse.type, languageHouse.addresses, languageHouse.emails, languageHouse.telephones, learningNeeds, mentor.name, mentor.teams, motivation, name, person, status] } }
##    ^^^ missing(?) : dateOfAcceptance, participations, endDate, referred, referredBy, results, startDate, team
#
#     # LearningNeed Handler
#    LearningNeedHandler: 
#        name: LearningNeed Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@learningNeedEndpointGet", "@learningNeedEndpointPost", "@learningNeedEndpointGetItem", "@learningNeedEndpointPut", "@learningNeedEndpointDelete"]
#        entity: "@learningNeed"
#
#    # LearningResult Handler
#    learningResultHandler: 
#        name: LearningResult Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@learningResultEndpointGet", "@learningResultEndpointPost", "@learningResultEndpointGetItem", "@learningResultEndpointPut", "@learningResultEndpointDelete"]
#        entity: "@learningResult"
#    
#    # Participation Handler
#    participationHandler:
#        name: Participation Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@participationEndpointGet", "@participationEndpointPost", "@participationEndpointGetItem", "@participationEndpointPut", "@participationEndpointDelete"]
#        entity: "@participation"
#
#    # TestResult Handler
#    TestResultHandler:
#        name: TestResult handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@testResultEndpointGet", "@testResultEndpointPost", "@testResultEndpointGetItem", "@testResultEndpointPut", "@testResultEndpointDelete"]
#        entity: "@testResult"
#    
#    # Document Handler
#    documentHandler:
#        name: Document Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@documentEndpointGet", "@documentEndpointPost", "@documentEndpointGetItem", "@documentEndpointPut", "@documentEndpointDelete"]
#        entity: "@document"
#    
#    # ContactMoment Handler
#    contactMomentHandler:
#        name: ContactMoment handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@contactMomentEndpointGet", "@contactMomentEndpointPost", "@contactMomentEndpointGetItem", "@contactMomentEndpointPut", "@contactMomentEndpointDelete"]
#        entity: "@contactMoment"
#
#    # PostalCode Handler
#    postal_codesHandler:
#        name: PostalCode Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@postalCodeEndpointGet", "@postalCodeEndpointPost", "@postalCodeEndpointGetItem", "@postalCodeEndpointPut", "@postalCodeEndpointDelete"]
#        entity: "@postalCode"
#    
#    # ShareStudent Handler
#    shareStudentHandler:
#        name: ShareStudent Handler
#        methods: ["*"]
#        sequence: 0
#        conditions: "{}"
#        endpoints: ["@shareStudentEndpointGet", "@shareStudentEndpointPost", "@shareStudentEndpointGetItem", "@shareStudentEndpointPut", "@shareStudentEndpointDelete"]
#        entity: "@shareStudent"
#
#
###########################
## ------ Fixtures ------ #
###########################
#
## todo add these back in when removing cc as dependency
### ObjectEntities
##App\Entity\ObjectEntity:
##    # Default organization
##    biscOrganization:
##        id: a0dc8cdc-c637-46b9-be8d-9103edc1e951
###        uri: "http://localhost/api/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951"
##        entity: "@organization"
##        organization: "https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951"
###        application: "uuid"
##        owner: "2ac800cc-b844-458d-87e1-b206fa80113a"
##
##    # Default person
##    defaultPerson:
##        id: 02dfabea-7607-46a2-a511-a2e9bd9f4de2
###        uri: "http://localhost/api/people/02dfabea-7607-46a2-a511-a2e9bd9f4de2"
##        entity: "@person"
##        organization: "https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951"
###        application: "uuid"
##        owner: "2ac800cc-b844-458d-87e1-b206fa80113a"
##
##    # Default person email
##    defaultPerson_email:
##        entity: "@email"
##        organization: "https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951"
###        application: "uuid"
##        owner: "2ac800cc-b844-458d-87e1-b206fa80113a"
##
##    # Default person telephone
##    defaultPerson_telephone:
##        entity: "@telephone"
##        organization: "https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951"
###        application: "uuid"
##        owner: "2ac800cc-b844-458d-87e1-b206fa80113a"
##
##    # Default person address
##    defaultPerson_address:
##        entity: "@address"
##        organization: "https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/a0dc8cdc-c637-46b9-be8d-9103edc1e951"
###        application: "uuid"
##        owner: "2ac800cc-b844-458d-87e1-b206fa80113a"
##
### Values
##App\Entity\Value:
##    # Default organization Values
##    biscOrganization_name:
##        attribute: "@organization_name"
##        stringValue: BISC
##        objectEntity: "@biscOrganization"
##
##    biscOrganization_description:
##        attribute: "@organization_description"
##        stringValue: The BISC organization! DO NOT TOUCH!!!
##        objectEntity: "@biscOrganization"
##        
##    biscOrganization_type:
##        attribute: "@organization_type"
##        stringValue: bisc
##        objectEntity: "@biscOrganization"
##
##    # Default person Values
##    defaultPerson_givenName:
##        attribute: "@person_givenName"
##        stringValue: John
##        objectEntity: "@defaultPerson"
##
##    defaultPerson_additionalName:
##        attribute: "@person_additionalName"
##        stringValue: Allen
##        objectEntity: "@defaultPerson"
##
##    defaultPerson_familyName:
##        attribute: "@person_familyName"
##        stringValue: Doe
##        objectEntity: "@defaultPerson"
##
##    defaultPerson_emails:
##        attribute: "@person_emails"
##        objects: ["@defaultPerson_email"]
##        objectEntity: "@defaultPerson"
##
##    defaultPerson_telephones:
##        attribute: "@person_telephones"
##        objects: ["@defaultPerson_telephone"]
##        objectEntity: "@defaultPerson"
##
##    defaultPerson_addresses:
##        attribute: "@person_addresses"
##        objects: ["@defaultPerson_address"]
##        objectEntity: "@defaultPerson"
##
##    # Default person email Values
##    defaultPerson_email_name:
##        attribute: "@email_name"
##        stringValue: email for default person
##        objectEntity: "@defaultPerson_email"
##
##    defaultPerson_email_email:
##        attribute: "@email_email"
##        stringValue: default-person@test.com
##        objectEntity: "@defaultPerson_email"
##
##    # Default person telephone Values
##    defaultPerson_telephone_name:
##        attribute: "@telephone_name"
##        stringValue: telephone for default person
##        objectEntity: "@defaultPerson_telephone"
##
##    defaultPerson_telephone_telephone:
##        attribute: "@telephone_telephone"
##        stringValue: 0687654321
##        objectEntity: "@defaultPerson_telephone"
##
##    # Default person address Values
##    defaultPerson_address_name:
##        attribute: "@address_name"
##        stringValue: address for default person
##        objectEntity: "@defaultPerson_address"
##
##    defaultPerson_address_street:
##        attribute: "@address_street"
##        stringValue: someotherstreet
##        objectEntity: "@defaultPerson_address"
##
##    defaultPerson_address_houseNumber:
##        attribute: "@address_houseNumber"
##        stringValue: 666
##        objectEntity: "@defaultPerson_address"
##
##    defaultPerson_address_postalCode:
##        attribute: "@address_postalCode"
##        stringValue: 1234
##        objectEntity: "@defaultPerson_address"
##
##    defaultPerson_address_locality:
##        attribute: "@address_locality"
##        stringValue: Amsterdam
##        objectEntity: "@defaultPerson_address"
