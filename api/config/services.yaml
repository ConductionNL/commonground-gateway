# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind: 
            iterable $actionHandlers: !tagged_iterator commongateway.action_handlers
        
    # this config only applies to the services created by this file
    _instanceof:
        # actionHandlers whose classes are instances of ActionHandlerInterface will be tagged automatically and set to public
        App\ActionHandler\ActionHandlerInterface:
            public: true
            tags: ['commongateway.action_handlers']
            
    App\Service\ActionService:
        autowire: false
        # inject all services tagged with commongateway.action_handlers as first argument
        arguments:
            $actionHandlers: !tagged_iterator commongateway.action_handlers # Inject all services tagged with "commongateway.action_handlers"
            $container: '@service_container'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
    Redis:
        class: Redis
        calls:
            -   method: connect
                arguments:
                    - '%env(REDIS_HOST)%'
                    - '%env(int:REDIS_PORT)%'
            # If you need key prefix, uncomment line belows
            # - method: setOption
            #   arguments:
            #       - !php/const Redis::OPT_PREFIX
            #       - 'my_prefix'

    # TODO: test if we still need this here, might be deprecated
    App\Subscriber\ValueDatabaseSubscriber:
        tags:
            - name: 'doctrine.event_subscriber'
              priority: 0
                
              # you can also restrict listeners to a specific Doctrine connection
              connection: 'default'
    
    # TODO: test if we still need this here, might be deprecated
    CommonGateway\CoreBundle\Subscriber\ObjectUriSubscriber:
        tags:
            - name: 'doctrine.event_subscriber'
                
              # subscribers can define their priority in case multiple subscribers or listeners are associated
              # to the same event (default priority = 0; higher numbers = listener is run earlier)
              priority: 1

              # you can also restrict listeners to a specific Doctrine connection
              connection: 'default'
        
    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
            
    # Enable gedmo timestampable for DateCreated and DateModified    
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    monolog.logger.mongo:
        class: MongoDB\Client
        arguments: [ '%cache_url%' ]
    
    monolog.session.processor:
        class: App\Logger\SessionDataProcessor
        tags:
            - { name: monolog.processor }
