# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    App\Swagger\GatewayDecorator:
        decorates: 'api_platform.openapi.normalizer.api_gateway'
        arguments: [ '@App\Swagger\GatewayDecorator.inner' ]
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
            
    App\ActionHandler\SynchronizationCollectionHandler:
        public: true
        arguments:
            $synchronizationService: '@App\Service\SynchronizationService'

    App\ActionHandler\SynchronizationItemHandler:
        public: true
        arguments:
            $synchronizationService: '@App\Service\SynchronizationService'

    App\ActionHandler\SynchronizationPushHandler:
        public: true
        arguments:
            $synchronizationService: '@App\Service\SynchronizationService'

    App\ActionHandler\SynchronizationWebhookHandler:
        public: true
        arguments:
            $synchronizationService: '@App\Service\SynchronizationService'
            
    App\ActionHandler\BijlagenArrayHandler:
        public: true
        arguments:
            $bijlagenArrayService: '@App\Service\BijlagenArrayService'
            
    App\ActionHandler\EmailHandler:
        public: true
        arguments:
            $emailService: '@App\Service\EmailService'

    App\ActionHandler\EnrichPubliccodeHandler:
        public: true
        arguments:
            $publiccodeService: '@App\Service\PubliccodeService'
            
    App\ActionHandler\HandelsRegisterSearchHandler:
        public: true
        arguments:
            $handelsRegisterSearchService: '@App\Service\HandelsRegisterSearchService'
            
    App\ActionHandler\HuwelijksplannerHandler:
        public: true
        arguments:
            $huwelijksplannerService: '@App\Service\HuwelijksplannerService'
            
    App\ActionHandler\IdentificationHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'
            
    App\ActionHandler\MapSimXMLHandler:
        public: true
        arguments:
            $mapSimXMLService: '@App\Service\MapSimXMLService'
            
    App\ActionHandler\MapZaakTypeHandler:
        public: true
        arguments:
            $mapZaakTypeService: '@App\Service\MapZaakTypeService'
            
    App\ActionHandler\NotificationHandler:
        public: true
        arguments:
            $notificationService: '@App\Service\NotificationService'
            
    App\ActionHandler\PubliccodeCheckRepositoriesForPubliccodeHandler:
        public: true
        arguments:
            $publiccodeService: '@App\Service\PubliccodeService'
            
    App\ActionHandler\PubliccodeFindGithubRepositoryThroughOrganizationHandler:
        public: true
        arguments:
            $publiccodeService: '@App\Service\PubliccodeService'
            
    App\ActionHandler\PubliccodeFindOrganizationThroughRepositoriesHandler:
        public: true
        arguments:
            $publiccodeService: '@App\Service\PubliccodeService'

    App\ActionHandler\PubliccodeFindRepositoriesThroughOrganizationHandler:
        public: true
        arguments:
            $publiccodeService: '@App\Service\PubliccodeService'

    App\ActionHandler\PubliccodeRatingHandler:
        public: true
        arguments:
            $publiccodeService: '@App\Service\PubliccodeService'
            
    App\ActionHandler\ZdsToZGWHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'

    App\ActionHandler\ZdsToZGWDocumentenHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'
            
    App\ActionHandler\ZdsValidationHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'

    App\ActionHandler\ZgwZaaktypeHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'

    App\ActionHandler\ZgwToZdsHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'
            
    App\ActionHandler\SimXMLToZGWHandler:
        public: true
        arguments:
            $simXMLZaakService: '@App\Service\SimXMLZaakService'

    App\ActionHandler\ZgwObjectInformatieObjectToZdsDocumentHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'
            

    App\ActionHandler\ZgwToVrijbrpHandler:
        public: true
        arguments:
            $zgwToVrijbrpService: '@App\Service\ZgwToVrijbrpService'
            

    App\ActionHandler\ZaakInformatieObjectHandler:
        public: true
        arguments:
            $zdsZaakService: '@App\Service\ZdsZaakService'

    Redis:
        class: Redis
        calls:
            -   method: connect
                arguments:
                    - '%env(REDIS_HOST)%'
                    - '%env(int:REDIS_PORT)%'
            # If you need key prefix, uncomment line belows
            # - method: setOption
            #   arguments:
            #       - !php/const Redis::OPT_PREFIX
            #       - 'my_prefix'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
            
    # Enable gedmo timestampable for DateCreated and DateModified    
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]
