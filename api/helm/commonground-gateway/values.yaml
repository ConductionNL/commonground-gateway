# Default values for commonground-gateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

global:
  domain: localhost
  tls: true

config:
  env: prod
  trustedHosts: '^.+$'
  corsAllowOrigin:
    - '*'
  trustedProxies:
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
  version: V1.0
  debug: 0
  cache: true
  githubKey: ''
  samesiteCookie: lax
  readOnly: "true"
  # todo move cronRunner to its own 'tab' so it isn't a subtab under config?
  cronRunner: 
    enabled: true
    activeDeadlineSeconds: 600 # activeDeadlineSeconds Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer.
    concurrencyPolicy: Forbid # The cron job does not allow concurrent runs; if it is time for a new job run and the previous job run hasnâ€™t finished yet, the cron job skips the new job run.
    crontab: '*/5 * * * *' # https://crontab.guru/
    appAuth: false # If we should check and care about authorization in the cronRunner pods.
  defaultRedirectUrl: useDomain
  defaultBackUrl: useDomain
  documentation_description: "This documentation contains the endpoints on your commonground gateway.

# Authentication

The gateway offers three forms of authentication:
- API Key
- Cookies
- Bearer Token

Bearer Token - Bearer Tokens are the predominant type of access token used with OAuth 2.0. A Bearer Token is an opaque string, not intended to have any meaning to clients using it."

databaseType: postgresql

security:
  rootCA: |
      -----BEGIN CERTIFICATE-----
      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
      ljr/Q8Pw+OfUZTzKg4PVDQVfFqKtyosv
      -----END CERTIFICATE-----
  authEnabled: true
  sessionDuration: 900
  certificate:
    existingSecret: ''
    privateKey: ''
    certificate: ''
  saml:
    enabled: false
    idp:
      metadata: ''
      singleSignOnUrl: ''
      logoutUrl: ''
      certificate:
        existingSecret: ''
        certificate: ''
  digid:
    enabled: false
    certificate: ''
    privatekey: ''
    artifactUrl: ''
    idp:
      metadata: ''
      singleSignOnUrl: ''
      logoutUrl: ''
      certificate:
        existingSecret: ''
        certificate: ''
  jwt:
    id:
    privateKey:

php:
  repository: ghcr.io/conductionnl/commonground-gateway-php
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#    limits:
#      cpu: 400m
#      memory: 512Mi
#    requests:
#      cpu: 200m
#      memory: 256Mi


nginx:
  repository: ghcr.io/conductionnl/commonground-gateway-nginx
  pullPolicy: Always
  tag: "latest"
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#    limits:
#      cpu: 200m
#      memory: 128Mi
#    requests:
#      cpu: 100m
#      memory: 64Mi

redis:
  enabled: true
  architecture: standalone
  redisPort: 6379
  auth:
    enabled: false
  pullPolicy: IfNotPresent
  
rabbitmq:
  auth:
      username: 'example'
      password: '!changeMe!'
  service:
      port: 5672

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

postgresql:
  enabled: true
  # If plugging in an external postgresql provider, the full url to use
  url: ''
  image:
    tag: 11
    pullPolicy: IfNotPresent
  auth:
    username: 'commonground-gateway'
    password: '!ChangeMe!'
    database: 'commonground-gateway'
  # Persistent Volume Storage configuration.
  # ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  persistence:
    enabled: true

mongodb:
    enabled: true
    url: ''
    image:
        tag: 6.0.3
        pullPolicy: IfNotPresent
    auth:
        enabled: true
        rootUser: api-platform
        rootPassword: "!ChangeMe!"

gateway-ui:
    enabled: true

consumer:
    replicaCount: 5

podAnnotations:
    prometheus.io/path: /metrics
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
    prometheus.io/interval: '600s'

podSecurityContext: {}

securityContextPhp: 
    privileged: false
    allowPrivilegeEscalation: false
    runAsNonRoot: false
    capabilities:
      drop:
          - all
    runAsUser: 101
    # Warning: enabling the root filesystem for the PHP container disables the possibility of adding code packages for the gateway on runtime
    readOnlyRootFilesystem: false
securityContextNginx: 
    privileged: false
    allowPrivilegeEscalation: false
    runAsNonRoot: false
    capabilities:
      drop:
        - all
      add:
        - chown
        - dac_override
        - setgid
        - setuid
        - net_bind_service
    runAsUser: 101
#    # Warning: the Nginx image is at this moment not able to run on a read-only filesystem.
#    readOnlyRootFilesystem: false

service:
  type: ClusterIP
  port: 80
  sslport: 8443

ingress:
  enabled: true
  className: "nginx"
  maxRequestSize: 50m
  path: /
  pathType: ImplementationSpecific
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local



autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

fixtures: {}
