map $NGINX_ENV  $csp {
    'prod'      "default-src 'self'";
    default     "default-src * 'unsafe-inline' blob: data:";
}

server {
    listen 8080;
    listen 8443 ssl;

    error_log /var/log/nginx/error.log debug;

    server_name localhost;
    ssl_certificate /var/certs/tls.crt;
    ssl_certificate_key /var/certs/tls.key;

    root /srv/api/public;

    add_header Content-Security-Policy $csp;
    add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), payment=(self), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=(), conversion-measurement=(self),focus-without-user-activation=(), hid=(), idle-detection=(), serial=(),sync-script=(), trust-token-redemption=(), vertical-scroll=(self)";

    # Fixes CORS header
    if ($http_origin = ''){
        set $http_origin "*";
    }
    proxy_hide_header Access-Control-Allow-Origin;
    add_header Access-Control-Allow-Origin $http_origin always;

    client_max_body_size 51M;

    location / {
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;

        # Set the proxy buffer size
	    proxy_buffer_size          128k;
	    proxy_buffers              4 256k;
	    proxy_busy_buffers_size    256k;
    }

    location ~ ^/index\.php(/|$) {

        # Set the proxy buffer size
	    proxy_buffer_size          128k;
	    proxy_buffers              4 256k;
	    proxy_busy_buffers_size    256k;

        # Comment the next line and uncomment the next to enable dynamic resolution (incompatible with Kubernetes)
        fastcgi_pass ${NGINX_HOST}:9000;
        #resolver 127.0.0.11;
        #set $upstream_host commonground-php;
        #fastcgi_pass $upstream_host:9000;

        fastcgi_buffer_size          128k;
        fastcgi_buffers              4 256k;

        fastcgi_param SSL_CIPHER            $ssl_cipher;
        fastcgi_param SSL_PROTOCOL          $ssl_protocol;
        fastcgi_param SSL_CLIENT_VERIFY     $ssl_client_verify;
        fastcgi_param SSL_CLIENT_CERT       $ssl_client_cert;
        fastcgi_param SSL_CLIENT_FPRINT     $ssl_client_fingerprint;
        fastcgi_param SSL_CLIENT_SERIAL     $ssl_client_serial;
        fastcgi_param SSL_CLIENT_S_DN       $ssl_client_s_dn;
        fastcgi_param SSL_CLIENT_I_DN       $ssl_client_i_dn;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
      return 404;
    }
}
